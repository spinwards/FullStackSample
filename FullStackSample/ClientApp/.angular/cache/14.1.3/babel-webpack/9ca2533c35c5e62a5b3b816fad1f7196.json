{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nclass BaseTreeControl {\n  constructor() {\n    /**\n     * A selection model with multi-selection to track expansion status.\n     */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /**\n   * Toggles one single data node's expanded/collapsed state.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  toggle(dataNode) {\n    this.expansionModel.toggle(dataNode);\n  }\n  /**\n   * Expands one single data node.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  expand(dataNode) {\n    this.expansionModel.select(dataNode);\n  }\n  /**\n   * Collapses one single data node.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  collapse(dataNode) {\n    this.expansionModel.deselect(dataNode);\n  }\n  /**\n   * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(dataNode);\n  }\n  /**\n   * Toggles a subtree rooted at `node` recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(dataNode) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /**\n   * Collapse all dataNodes in the tree.\n   * @return {?}\n   */\n\n\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /**\n   * Expands a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  expandDescendants(dataNode) {\n    /** @type {?} */\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n  /**\n   * Collapses a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  collapseDescendants(dataNode) {\n    /** @type {?} */\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\n\n\nclass FlatTreeControl extends BaseTreeControl {\n  /**\n   * Construct with flat tree data node functions getLevel and isExpandable.\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   */\n  constructor(getLevel, isExpandable) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  getDescendants(dataNode) {\n    /** @type {?} */\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    /** @type {?} */\n\n    const results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   * @return {?}\n   */\n\n\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes);\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\n\n\nclass NestedTreeControl extends BaseTreeControl {\n  /**\n   * Construct with nested tree function getChildren.\n   * @param {?} getChildren\n   */\n  constructor(getChildren) {\n    super();\n    this.getChildren = getChildren;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   * @return {?}\n   */\n\n\n  expandAll() {\n    this.expansionModel.clear();\n    /** @type {?} */\n\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n  /**\n   * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  getDescendants(dataNode) {\n    /** @type {?} */\n    const descendants = [];\n\n    this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n    return descendants.splice(1);\n  }\n  /**\n   * A helper function to get descendants recursively.\n   * @param {?} descendants\n   * @param {?} dataNode\n   * @return {?}\n   */\n\n\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    /** @type {?} */\n\n    const childrenNodes = this.getChildren(dataNode);\n\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(take(1)).subscribe(children => {\n        children.forEach(child => this._getDescendants(descendants, child));\n      });\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Context provided to the tree node component.\n * @template T\n */\n\n\nclass CdkTreeNodeOutletContext {\n  /**\n   * @param {?} data\n   */\n  constructor(data) {\n    this.$implicit = data;\n  }\n\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\n\n\nlet CdkTreeNodeDef = /*#__PURE__*/(() => {\n  class CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  CdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n    return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeDef,\n    selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"cdkTreeNodeDefWhen\", \"when\"]\n    }\n  });\n  /** @nocollapse */\n\n  return CdkTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nlet CdkTreeNodeOutlet = /*#__PURE__*/(() => {\n  class CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     */\n    constructor(viewContainer) {\n      this.viewContainer = viewContainer;\n    }\n\n  }\n\n  CdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n    return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  CdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeOutlet,\n    selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n  });\n  /** @nocollapse */\n\n  return CdkTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\n\n\nlet CdkTree = /*#__PURE__*/(() => {\n  class CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._onDestroy = new Subject();\n      /**\n       * Level of nodes\n       */\n\n      this._levels = new Map();\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n\n\n    get dataSource() {\n      return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n\n\n    set dataSource(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n      if (!this.treeControl) {\n        throw getTreeControlMissingError();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._nodeOutlet.viewContainer.clear();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (this._dataSource && typeof\n      /** @type {?} */\n      this._dataSource.disconnect === 'function') {\n        /** @type {?} */\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      /** @type {?} */\n      const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n\n      if (defaultNodeDefs.length > 1) {\n        throw getTreeMultipleDefaultNodeDefsError();\n      }\n\n      this._defaultNodeDef = defaultNodeDefs[0];\n\n      if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n        this._observeRenderChanges();\n      }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n\n\n    _switchDataSource(dataSource) {\n      if (this._dataSource && typeof\n      /** @type {?} */\n      this._dataSource.disconnect === 'function') {\n        /** @type {?} */\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      } // Remove the all dataNodes if there is now no data source\n\n\n      if (!dataSource) {\n        this._nodeOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n\n      if (this._nodeDefs) {\n        this._observeRenderChanges();\n      }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n\n\n    _observeRenderChanges() {\n      /** @type {?} */\n      let dataStream; // Cannot use `instanceof DataSource` since the data source could be a literal with\n      // `connect` function and may not extends DataSource.\n\n      if (typeof\n      /** @type {?} */\n      this._dataSource.connect === 'function') {\n        dataStream =\n        /** @type {?} */\n        this._dataSource.connect(this);\n      } else if (this._dataSource instanceof Observable) {\n        dataStream = this._dataSource;\n      } else if (Array.isArray(this._dataSource)) {\n        dataStream = of(this._dataSource);\n      }\n\n      if (dataStream) {\n        this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n      } else {\n        throw getTreeNoValidDataSourceError();\n      }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n\n\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n      /** @type {?} */\n      const changes = dataDiffer.diff(data);\n\n      if (!changes) {\n        return;\n      }\n\n      changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[\n          /** @type {?} */\n          currentIndex],\n          /** @type {?} */\n          currentIndex, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(\n          /** @type {?} */\n          adjustedPreviousIndex);\n\n          this._levels.delete(item.item);\n        } else {\n          /** @type {?} */\n          const view = viewContainer.get(\n          /** @type {?} */\n          adjustedPreviousIndex);\n          viewContainer.move(\n          /** @type {?} */\n          view, currentIndex);\n        }\n      });\n\n      this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n\n\n    _getNodeDef(data, i) {\n      if (this._nodeDefs.length === 1) {\n        return this._nodeDefs.first;\n      }\n      /** @type {?} */\n\n\n      const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n      if (!nodeDef) {\n        throw getTreeMissingMatchingNodeDefError();\n      }\n\n      return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n\n\n    insertNode(nodeData, index, viewContainer, parentData) {\n      /** @type {?} */\n      const node = this._getNodeDef(nodeData, index);\n      /** @type {?} */\n\n\n      const context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n      // Otherwise, use the level of parent node.\n\n      if (this.treeControl.getLevel) {\n        context.level = this.treeControl.getLevel(nodeData);\n      } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n        context.level =\n        /** @type {?} */\n        this._levels.get(parentData) + 1;\n      } else {\n        context.level = 0;\n      }\n\n      this._levels.set(nodeData, context.level);\n      /** @type {?} */\n\n\n      const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n      container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n      // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n      //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n      if (CdkTreeNode.mostRecentTreeNode) {\n        CdkTreeNode.mostRecentTreeNode.data = nodeData;\n      }\n    }\n\n  }\n\n  CdkTree.ɵfac = function CdkTree_Factory(t) {\n    return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  CdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkTree,\n    selectors: [[\"cdk-tree\"]],\n    contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n      }\n    },\n    viewQuery: function CdkTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n    inputs: {\n      dataSource: \"dataSource\",\n      treeControl: \"treeControl\",\n      trackBy: \"trackBy\"\n    },\n    exportAs: [\"cdkTree\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n    template: function CdkTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [CdkTreeNodeOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return CdkTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\n\n\nlet CdkTreeNode = /*#__PURE__*/(() => {\n  class CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n      this._elementRef = _elementRef;\n      this._tree = _tree;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * The role of the node should be 'group' if it's an internal node,\n       * and 'treeitem' if it's a leaf node.\n       */\n\n      this.role = 'treeitem';\n      CdkTreeNode.mostRecentTreeNode =\n      /** @type {?} */\n      this;\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n\n\n    get data() {\n      return this._data;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set data(value) {\n      this._data = value;\n\n      this._setRoleFromData();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isExpanded() {\n      return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get level() {\n      return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      // If this is the last tree node being destroyed,\n      // clear out the reference to avoid leaking memory.\n      if (CdkTreeNode.mostRecentTreeNode === this) {\n        CdkTreeNode.mostRecentTreeNode = null;\n      }\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n\n\n    focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _setRoleFromData() {\n      if (this._tree.treeControl.isExpandable) {\n        this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n      } else {\n        if (!this._tree.treeControl.getChildren) {\n          throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n\n\n        const childrenNodes = this._tree.treeControl.getChildren(this._data);\n\n        if (Array.isArray(childrenNodes)) {\n          this._setRoleFromChildren(\n          /** @type {?} */\n          childrenNodes);\n        } else if (childrenNodes instanceof Observable) {\n          childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(children => this._setRoleFromChildren(children));\n        }\n      }\n    }\n    /**\n     * @param {?} children\n     * @return {?}\n     */\n\n\n    _setRoleFromChildren(children) {\n      this.role = children && children.length ? 'group' : 'treeitem';\n    }\n\n  }\n\n  CdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n    return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n  };\n\n  CdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNode,\n    selectors: [[\"cdk-tree-node\"]],\n    hostAttrs: [1, \"cdk-tree-node\"],\n    hostVars: 3,\n    hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n      }\n    },\n    inputs: {\n      role: \"role\"\n    },\n    exportAs: [\"cdkTreeNode\"]\n  });\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n\n  CdkTreeNode.mostRecentTreeNode = null;\n  /** @nocollapse */\n\n  return CdkTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\n\n\nlet CdkNestedTreeNode = /*#__PURE__*/(() => {\n  class CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n      super(_elementRef, _tree);\n      this._elementRef = _elementRef;\n      this._tree = _tree;\n      this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      /** @type {?} */\n\n\n      const childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n      if (Array.isArray(childrenNodes)) {\n        this.updateChildrenNodes(\n        /** @type {?} */\n        childrenNodes);\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n      }\n\n      this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._clear();\n\n      super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @param {?=} children\n     * @return {?}\n     */\n\n\n    updateChildrenNodes(children) {\n      if (children) {\n        this._children = children;\n      }\n\n      if (this.nodeOutlet.length && this._children) {\n        /** @type {?} */\n        const viewContainer = this.nodeOutlet.first.viewContainer;\n\n        this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n      } else {\n        // Reset the data differ if there's no children nodes displayed\n        this._dataDiffer.diff([]);\n      }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n\n\n    _clear() {\n      if (this.nodeOutlet && this.nodeOutlet.first) {\n        this.nodeOutlet.first.viewContainer.clear();\n\n        this._dataDiffer.diff([]);\n      }\n    }\n\n  }\n\n  CdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n    return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkNestedTreeNode,\n    selectors: [[\"cdk-nested-tree-node\"]],\n    contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"],\n    hostVars: 2,\n    hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n      }\n    },\n    exportAs: [\"cdkNestedTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: CdkNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return CdkNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\n\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\n\nlet CdkTreeNodePadding = /*#__PURE__*/(() => {\n  class CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n      this._treeNode = _treeNode;\n      this._tree = _tree;\n      this._renderer = _renderer;\n      this._element = _element;\n      this._dir = _dir;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * CSS units used for the indentation value.\n       */\n\n      this.indentUnits = 'px';\n      this._indent = 40;\n\n      this._setPadding();\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n      }\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n\n\n    get level() {\n      return this._level;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set level(value) {\n      this._level = coerceNumberProperty(value);\n\n      this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n\n\n    get indent() {\n      return this._indent;\n    }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n\n\n    set indent(indent) {\n      /** @type {?} */\n      let value = indent;\n      /** @type {?} */\n\n      let units = 'px';\n\n      if (typeof indent === 'string') {\n        /** @type {?} */\n        const parts = indent.split(cssUnitPattern);\n        value = parts[0];\n        units = parts[1] || units;\n      }\n\n      this.indentUnits = units;\n      this._indent = coerceNumberProperty(value);\n\n      this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n\n\n    _paddingIndent() {\n      /** @type {?} */\n      const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n      /** @type {?} */\n\n      const level = this._level || nodeLevel;\n      return level ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _setPadding() {\n      /** @type {?} */\n      const padding = this._paddingIndent();\n      /** @type {?} */\n\n\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n      this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n\n  }\n\n  CdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n    return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n  };\n\n  CdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodePadding,\n    selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"cdkTreeNodePadding\", \"level\"],\n      indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n    }\n  });\n  /** @nocollapse */\n\n  return CdkTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\n\n\nlet CdkTreeNodeToggle = /*#__PURE__*/(() => {\n  class CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n      this._tree = _tree;\n      this._treeNode = _treeNode;\n      this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n\n\n    get recursive() {\n      return this._recursive;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set recursive(value) {\n      this._recursive = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _toggle(event) {\n      this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n      event.stopPropagation();\n    }\n\n  }\n\n  CdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n    return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n  };\n\n  CdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeToggle,\n    selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n    hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n          return ctx._toggle($event);\n        });\n      }\n    },\n    inputs: {\n      recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n    }\n  });\n  /** @nocollapse */\n\n  return CdkTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nlet CdkTreeModule = /*#__PURE__*/(() => {\n  class CdkTreeModule {}\n\n  CdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n    return new (t || CdkTreeModule)();\n  };\n\n  CdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTreeModule\n  });\n  CdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [FocusMonitor, CdkTreeNodeDef],\n    imports: [CommonModule]\n  });\n  return CdkTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: function () {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle }; //# sourceMappingURL=tree.js.map","map":null,"metadata":{},"sourceType":"module"}