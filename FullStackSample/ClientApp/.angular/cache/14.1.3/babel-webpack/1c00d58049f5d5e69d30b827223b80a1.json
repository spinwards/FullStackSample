{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, HOME, END } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\nconst _c0 = [\"body\"];\n\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\n\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\n\nconst _c3 = function (a0, a1) {\n  return {\n    collapsedHeight: a0,\n    expandedHeight: a1\n  };\n};\n\nconst _c4 = function (a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\n\nconst _c5 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c6 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = /*#__PURE__*/new InjectionToken('MAT_ACCORDION');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time and timing curve for expansion panel animations.\n  @type {?} */\n\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/** *\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n  @type {?} */\n\nconst matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: /*#__PURE__*/trigger('indicatorRotate', [/*#__PURE__*/state('collapsed, void', /*#__PURE__*/style({\n    transform: 'rotate(0deg)'\n  })), /*#__PURE__*/state('expanded', /*#__PURE__*/style({\n    transform: 'rotate(180deg)'\n  })), /*#__PURE__*/transition('expanded <=> collapsed, void => collapsed', /*#__PURE__*/animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: /*#__PURE__*/trigger('expansionHeight', [/*#__PURE__*/state('collapsed, void', /*#__PURE__*/style({\n    height: '{{collapsedHeight}}'\n  }), {\n    params: {\n      collapsedHeight: '48px'\n    }\n  }), /*#__PURE__*/state('expanded', /*#__PURE__*/style({\n    height: '{{expandedHeight}}'\n  }), {\n    params: {\n      expandedHeight: '64px'\n    }\n  }), /*#__PURE__*/transition('expanded <=> collapsed, void => collapsed', /*#__PURE__*/group([/*#__PURE__*/query('@indicatorRotate', /*#__PURE__*/animateChild(), {\n    optional: true\n  }), /*#__PURE__*/animate(EXPANSION_PANEL_ANIMATION_TIMING)]))]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: /*#__PURE__*/trigger('bodyExpansion', [/*#__PURE__*/state('collapsed, void', /*#__PURE__*/style({\n    height: '0px',\n    visibility: 'hidden'\n  })), /*#__PURE__*/state('expanded', /*#__PURE__*/style({\n    height: '*',\n    visibility: 'visible'\n  })), /*#__PURE__*/transition('expanded <=> collapsed, void => collapsed', /*#__PURE__*/animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nlet MatExpansionPanelContent = /*#__PURE__*/(() => {\n  class MatExpansionPanelContent {\n    /**\n     * @param {?} _template\n     */\n    constructor(_template) {\n      this._template = _template;\n    }\n\n  }\n\n  MatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n    return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  MatExpansionPanelContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelContent,\n    selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n  });\n  /** @nocollapse */\n\n  return MatExpansionPanelContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst _CdkAccordionItem = CdkAccordionItem;\n/** *\n * Counter for generating unique element ids.\n  @type {?} */\n\nlet uniqueId = 0;\nconst ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nlet MatExpansionPanel = /*#__PURE__*/(() => {\n  class MatExpansionPanel extends CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?=} _document\n     * @param {?=} _animationMode\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, // @breaking-change 8.0.0 _document and _animationMode to be made required\n    _document, _animationMode) {\n      super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n      this._viewContainerRef = _viewContainerRef;\n      this._animationMode = _animationMode;\n      this._hideToggle = false;\n      /**\n       * An event emitted after the body's expansion animation happens.\n       */\n\n      this.afterExpand = new EventEmitter();\n      /**\n       * An event emitted after the body's collapse animation happens.\n       */\n\n      this.afterCollapse = new EventEmitter();\n      /**\n       * Stream that emits for changes in `\\@Input` properties.\n       */\n\n      this._inputChanges = new Subject();\n      /**\n       * ID for the associated header element. Used for a11y labelling.\n       */\n\n      this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n      this.accordion = accordion;\n      this._document = _document;\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n\n\n    get hideToggle() {\n      return this._hideToggle || this.accordion && this.accordion.hideToggle;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set hideToggle(value) {\n      this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n\n\n    _hasSpacing() {\n      if (this.accordion) {\n        // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n        // the [displayMode] input changes, the change detection will also cover the host bindings\n        // of this expansion panel.\n        return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n      }\n\n      return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n\n\n    _getExpandedState() {\n      return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      if (this._lazyContent) {\n        // Render the content as soon as the panel becomes open.\n        this.opened.pipe(startWith(\n        /** @type {?} */\n        null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      this._inputChanges.complete();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _bodyAnimation(event) {\n      const {\n        phaseName,\n        toState,\n        fromState\n      } = event;\n\n      if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n        this.afterExpand.emit();\n      }\n\n      if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n        this.afterCollapse.emit();\n      }\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n\n\n    _containsFocus() {\n      if (this._body && this._document) {\n        /** @type {?} */\n        const focusedElement = this._document.activeElement;\n        /** @type {?} */\n\n        const bodyElement = this._body.nativeElement;\n        return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n      }\n\n      return false;\n    }\n\n  }\n\n  MatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n    return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatExpansionPanel.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatExpansionPanel,\n    selectors: [[\"mat-expansion-panel\"]],\n    contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n      }\n    },\n    viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-expansion-panel\"],\n    hostVars: 6,\n    hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      expanded: \"expanded\",\n      hideToggle: \"hideToggle\"\n    },\n    outputs: {\n      opened: \"opened\",\n      closed: \"closed\",\n      expandedChange: \"expandedChange\",\n      afterExpand: \"afterExpand\",\n      afterCollapse: \"afterCollapse\"\n    },\n    exportAs: [\"matExpansionPanel\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {\n      provide: MAT_ACCORDION,\n      useValue: ɵ0\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 4,\n    consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n    template: function MatExpansionPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n          return ctx._bodyAnimation($event);\n        });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n      }\n    },\n    dependencies: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matExpansionAnimations.bodyExpansion]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatExpansionPanel;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatExpansionPanelActionRow = /*#__PURE__*/(() => {\n  class MatExpansionPanelActionRow {}\n\n  MatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n    return new (t || MatExpansionPanelActionRow)();\n  };\n\n  MatExpansionPanelActionRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelActionRow,\n    selectors: [[\"mat-action-row\"]],\n    hostAttrs: [1, \"mat-action-row\"]\n  });\n  return MatExpansionPanelActionRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n\n\nlet MatExpansionPanelHeader = /*#__PURE__*/(() => {\n  class MatExpansionPanelHeader {\n    /**\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     */\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef) {\n      this.panel = panel;\n      this._element = _element;\n      this._focusMonitor = _focusMonitor;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._parentChangeSubscription = Subscription.EMPTY;\n      /** @type {?} */\n\n      const accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(changes => !!changes[\"hideToggle\"])) : EMPTY; // Since the toggle state depends on an @Input on the panel, we\n      // need to subscribe and trigger change detection manually.\n\n      this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => !!(changes[\"hideToggle\"] || changes[\"disabled\"])))).subscribe(() => this._changeDetectorRef.markForCheck()); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n      panel.closed.pipe(filter(() => panel._containsFocus())).subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n      _focusMonitor.monitor(_element).subscribe(origin => {\n        if (origin && panel.accordion) {\n          panel.accordion._handleHeaderFocus(this);\n        }\n      });\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this.panel.disabled;\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n\n\n    _toggle() {\n      this.panel.toggle();\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n\n\n    _isExpanded() {\n      return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n\n\n    _getExpandedState() {\n      return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n\n\n    _getPanelId() {\n      return this.panel.id;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n\n\n    _showToggle() {\n      return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _keydown(event) {\n      switch (event.keyCode) {\n        // Toggle for space and enter keys.\n        case SPACE:\n        case ENTER:\n          event.preventDefault();\n\n          this._toggle();\n\n          break;\n\n        default:\n          if (this.panel.accordion) {\n            this.panel.accordion._handleHeaderKeydown(event);\n          }\n\n          return;\n      }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @return {?}\n     */\n\n\n    focus(origin = 'program') {\n      this._focusMonitor.focusVia(this._element, origin);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._parentChangeSubscription.unsubscribe();\n\n      this._focusMonitor.stopMonitoring(this._element);\n    }\n\n  }\n\n  MatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n    return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatExpansionPanelHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatExpansionPanelHeader,\n    selectors: [[\"mat-expansion-panel-header\"]],\n    hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\"],\n    hostVars: 14,\n    hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n          return ctx._toggle();\n        })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? -1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@expansionHeight\", ɵngcc0.ɵɵpureFunction2(11, _c4, ctx._getExpandedState(), ɵngcc0.ɵɵpureFunction2(8, _c3, ctx.collapsedHeight, ctx.expandedHeight)));\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded());\n      }\n    },\n    inputs: {\n      expandedHeight: \"expandedHeight\",\n      collapsedHeight: \"collapsedHeight\"\n    },\n    ngContentSelectors: _c6,\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n    template: function MatExpansionPanelHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c5);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n      }\n    },\n    dependencies: [ɵngcc4.NgIf],\n    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matExpansionAnimations.indicatorRotate, matExpansionAnimations.expansionHeaderHeight]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatExpansionPanelHeader;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n\n\nlet MatExpansionPanelDescription = /*#__PURE__*/(() => {\n  class MatExpansionPanelDescription {}\n\n  MatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n    return new (t || MatExpansionPanelDescription)();\n  };\n\n  MatExpansionPanelDescription.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelDescription,\n    selectors: [[\"mat-panel-description\"]],\n    hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n  });\n  return MatExpansionPanelDescription;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n\n\nlet MatExpansionPanelTitle = /*#__PURE__*/(() => {\n  class MatExpansionPanelTitle {}\n\n  MatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n    return new (t || MatExpansionPanelTitle)();\n  };\n\n  MatExpansionPanelTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelTitle,\n    selectors: [[\"mat-panel-title\"]],\n    hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n  });\n  return MatExpansionPanelTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\n\nlet MatAccordion = /*#__PURE__*/(() => {\n  class MatAccordion extends CdkAccordion {\n    constructor() {\n      super(...arguments);\n      this._hideToggle = false;\n      /**\n       * Display mode used for all expansion panels in the accordion. Currently two display\n       * modes exist:\n       *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n       *     panel at a different elevation from the rest of the accordion.\n       *  flat - no spacing is placed around expanded panels, showing all panels at the same\n       *     elevation.\n       */\n\n      this.displayMode = 'default';\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n\n\n    get hideToggle() {\n      return this._hideToggle;\n    }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n\n\n    set hideToggle(show) {\n      this._hideToggle = coerceBooleanProperty(show);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._keyManager = new FocusKeyManager(this._headers).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleHeaderKeydown(event) {\n      const {\n        keyCode\n      } = event;\n      /** @type {?} */\n\n      const manager = this._keyManager;\n\n      if (keyCode === HOME) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      } else if (keyCode === END) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n\n\n    _handleHeaderFocus(header) {\n      this._keyManager.updateActiveItem(header);\n    }\n\n  }\n\n  MatAccordion.ɵfac = /*@__PURE__*/function () {\n    let ɵMatAccordion_BaseFactory;\n    return function MatAccordion_Factory(t) {\n      return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion);\n    };\n  }();\n\n  MatAccordion.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatAccordion,\n    selectors: [[\"mat-accordion\"]],\n    contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-accordion\"],\n    inputs: {\n      multi: \"multi\",\n      displayMode: \"displayMode\",\n      hideToggle: \"hideToggle\"\n    },\n    exportAs: [\"matAccordion\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAccordion;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet MatExpansionModule = /*#__PURE__*/(() => {\n  class MatExpansionModule {}\n\n  MatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) {\n    return new (t || MatExpansionModule)();\n  };\n\n  MatExpansionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatExpansionModule\n  });\n  MatExpansionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, CdkAccordionModule, PortalModule]\n  });\n  return MatExpansionModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, {\n    declarations: function () {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    },\n    imports: function () {\n      return [CommonModule, CdkAccordionModule, PortalModule];\n    },\n    exports: function () {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, _CdkAccordionItem, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations }; //# sourceMappingURL=expansion.js.map","map":null,"metadata":{},"sourceType":"module"}