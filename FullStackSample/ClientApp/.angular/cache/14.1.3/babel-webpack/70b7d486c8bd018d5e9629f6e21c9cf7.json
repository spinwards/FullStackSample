{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewChild, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, EventEmitter, Inject, Optional, NgModule, Injectable, Injector, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { DOCUMENT, CommonModule, Location } from '@angular/common';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { merge, Subject, of } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to access the data that was passed in to a bottom sheet.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/layout';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/common';\n\nfunction MatBottomSheetContainer_ng_template_0_Template(rf, ctx) {}\n\nconst MAT_BOTTOM_SHEET_DATA = /*#__PURE__*/new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n * @template D\n */\n\nclass MatBottomSheetConfig {\n  constructor() {\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * Whether the bottom sheet has a backdrop.\n     */\n\n    this.hasBackdrop = true;\n    /**\n     * Whether the user can use escape or clicking outside to close the bottom sheet.\n     */\n\n    this.disableClose = false;\n    /**\n     * Aria label to assign to the bottom sheet element.\n     */\n\n    this.ariaLabel = null;\n    /**\n     * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true;\n    /**\n     * Whether the bottom sheet should focus the first focusable element on open.\n     */\n\n    this.autoFocus = true;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the Material bottom sheet.\n  @type {?} */\n\n\nconst matBottomSheetAnimations = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'translateY(100%)'\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'translateY(0%)'\n  })), /*#__PURE__*/transition('visible => void, visible => hidden', /*#__PURE__*/animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)), /*#__PURE__*/transition('void => visible', /*#__PURE__*/animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * \\@docs-private\n */\n\nlet MatBottomSheetContainer = /*#__PURE__*/(() => {\n  class MatBottomSheetContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusTrapFactory\n     * @param {?} breakpointObserver\n     * @param {?} document\n     * @param {?} bottomSheetConfig\n     */\n    constructor(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, bottomSheetConfig) {\n      super();\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this.bottomSheetConfig = bottomSheetConfig;\n      /**\n       * The state of the bottom sheet animations.\n       */\n\n      this._animationState = 'void';\n      /**\n       * Emits whenever the state of the animation changes.\n       */\n\n      this._animationStateChanged = new EventEmitter();\n      /**\n       * Element that was focused before the bottom sheet was opened.\n       */\n\n      this._elementFocusedBeforeOpened = null;\n      this._document = document;\n      this._breakpointSubscription = breakpointObserver.observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n\n        this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n\n        this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n    }\n    /**\n     * Attach a component portal as content to this bottom sheet container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n\n\n    attachComponentPortal(portal) {\n      this._validatePortalAttached();\n\n      this._setPanelClass();\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this bottom sheet container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n\n\n    attachTemplatePortal(portal) {\n      this._validatePortalAttached();\n\n      this._setPanelClass();\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Begin animation of bottom sheet entrance into view.\n     * @return {?}\n     */\n\n\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Begin animation of the bottom sheet exiting from view.\n     * @return {?}\n     */\n\n\n    exit() {\n      if (!this._destroyed) {\n        this._animationState = 'hidden';\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._breakpointSubscription.unsubscribe();\n\n      this._destroyed = true;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _onAnimationDone(event) {\n      if (event.toState === 'hidden') {\n        this._restoreFocus();\n      } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n        this._trapFocus();\n      }\n\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _onAnimationStart(event) {\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * @param {?} cssClass\n     * @param {?} add\n     * @return {?}\n     */\n\n\n    _toggleClass(cssClass, add) {\n      /** @type {?} */\n      const classList = this._elementRef.nativeElement.classList;\n      add ? classList.add(cssClass) : classList.remove(cssClass);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _validatePortalAttached() {\n      if (this._portalOutlet.hasAttached()) {\n        throw Error('Attempting to attach bottom sheet content after content is already attached');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _setPanelClass() {\n      /** @type {?} */\n      const element = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      const panelClass = this.bottomSheetConfig.panelClass;\n\n      if (Array.isArray(panelClass)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClass.forEach(cssClass => element.classList.add(cssClass));\n      } else if (panelClass) {\n        element.classList.add(panelClass);\n      }\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n\n\n    _trapFocus() {\n      if (!this._focusTrap) {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      }\n\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n    /**\n     * Restores focus to the element that was focused before the bottom sheet opened.\n     * @return {?}\n     */\n\n\n    _restoreFocus() {\n      /** @type {?} */\n      const toFocus = this._elementFocusedBeforeOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (toFocus && typeof toFocus.focus === 'function') {\n        toFocus.focus();\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /**\n     * Saves a reference to the element that was focused before the bottom sheet was opened.\n     * @return {?}\n     */\n\n\n    _savePreviouslyFocusedElement() {\n      this._elementFocusedBeforeOpened =\n      /** @type {?} */\n      this._document.activeElement; // The `focus` method isn't available during server-side rendering.\n\n      if (this._elementRef.nativeElement.focus) {\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n\n  }\n\n  MatBottomSheetContainer.ɵfac = function MatBottomSheetContainer_Factory(t) {\n    return new (t || MatBottomSheetContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatBottomSheetConfig));\n  };\n\n  MatBottomSheetContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatBottomSheetContainer,\n    selectors: [[\"mat-bottom-sheet-container\"]],\n    viewQuery: function MatBottomSheetContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"mat-bottom-sheet-container\"],\n    hostVars: 2,\n    hostBindings: function MatBottomSheetContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.start\", function MatBottomSheetContainer_animation_state_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@state.done\", function MatBottomSheetContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.bottomSheetConfig == null ? null : ctx.bottomSheetConfig.ariaLabel);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatBottomSheetContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatBottomSheetContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    dependencies: [ɵngcc3.CdkPortalOutlet],\n    styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}@media screen and (-ms-high-contrast:active){.mat-bottom-sheet-container{outline:1px solid}}.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium,.mat-bottom-sheet-container-xlarge{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matBottomSheetAnimations.bottomSheetState]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatBottomSheetContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet MatBottomSheetModule = /*#__PURE__*/(() => {\n  class MatBottomSheetModule {}\n\n  MatBottomSheetModule.ɵfac = function MatBottomSheetModule_Factory(t) {\n    return new (t || MatBottomSheetModule)();\n  };\n\n  MatBottomSheetModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatBottomSheetModule\n  });\n  MatBottomSheetModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, OverlayModule, MatCommonModule, PortalModule, MatCommonModule]\n  });\n  return MatBottomSheetModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBottomSheetModule, {\n    declarations: function () {\n      return [MatBottomSheetContainer];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, MatCommonModule, PortalModule];\n    },\n    exports: function () {\n      return [MatBottomSheetContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n * @template T, R\n */\n\n\nclass MatBottomSheetRef {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   * @param {?=} _location\n   */\n  constructor(containerInstance, _overlayRef, // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location) {\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the bottom sheet has been dismissed.\n     */\n\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the bottom sheet has opened and appeared.\n     */\n\n    this._afterOpened = new Subject();\n    this.containerInstance = containerInstance; // Emit when opening animation completes\n\n    containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'visible'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1)).subscribe(() => {\n      this._overlayRef.dispose();\n\n      this._afterDismissed.next(this._result);\n\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(_overlayRef.backdropClick(), _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))).subscribe(() => this.dismiss());\n    }\n  }\n  /**\n   * Dismisses the bottom sheet.\n   * @param {?=} result Data to be passed back to the bottom sheet opener.\n   * @return {?}\n   */\n\n\n  dismiss(result) {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n  /**\n   * Gets an observable that is notified when the bottom sheet is finished closing.\n   * @return {?}\n   */\n\n\n  afterDismissed() {\n    return this._afterDismissed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the bottom sheet has opened and appeared.\n   * @return {?}\n   */\n\n\n  afterOpened() {\n    return this._afterOpened.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   * @return {?}\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   * @return {?}\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to specify default bottom sheet options.\n  @type {?} */\n\n\nconst MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-bottom-sheet-default-options');\n/**\n * Service to trigger Material Design bottom sheets.\n */\n\nclass MatBottomSheet {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _parentBottomSheet\n   * @param {?=} _location\n   * @param {?=} _defaultOptions\n   */\n  constructor(_overlay, _injector, _parentBottomSheet, _location, _defaultOptions) {\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._parentBottomSheet = _parentBottomSheet;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._bottomSheetRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened bottom sheet.\n   * @return {?}\n   */\n\n\n  get _openedBottomSheetRef() {\n    /** @type {?} */\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _openedBottomSheetRef(value) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n  /**\n   * @template T, D, R\n   * @param {?} componentOrTemplateRef\n   * @param {?=} config\n   * @return {?}\n   */\n\n\n  open(componentOrTemplateRef, config) {\n    /** @type {?} */\n    const _config = _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    /** @type {?} */\n\n\n    const overlayRef = this._createOverlay(_config);\n    /** @type {?} */\n\n\n    const container = this._attachContainer(overlayRef, _config);\n    /** @type {?} */\n\n\n    const ref = new MatBottomSheetRef(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n      /** @type {?} */\n      null,\n      /** @type {?} */\n      {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      }));\n    } else {\n      /** @type {?} */\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined, this._createInjector(_config, ref));\n      /** @type {?} */\n\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    } // When the bottom sheet is dismissed, clear the reference to it.\n\n\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n    return ref;\n  }\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   * @return {?}\n   */\n\n\n  dismiss() {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   * @param {?} overlayRef\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  _attachContainer(overlayRef, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatBottomSheetConfig, config]]));\n    /** @type {?} */\n\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    /** @type {?} */\n\n    const containerRef = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param {?} config The user-specified bottom sheet config.\n   * @return {?}\n   */\n\n\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @template T\n   * @param {?} config Config that was used to create the bottom sheet.\n   * @param {?} bottomSheetRef Reference to the bottom sheet.\n   * @return {?}\n   */\n\n\n  _createInjector(config, bottomSheetRef) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n\n    const injectionTokens = new WeakMap([[MatBottomSheetRef, bottomSheetRef], [MAT_BOTTOM_SHEET_DATA, config.data]]);\n\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: of()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n}\n\nMatBottomSheet.ɵfac = function MatBottomSheet_Factory(t) {\n  return new (t || MatBottomSheet)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(MatBottomSheet, 12), ɵngcc0.ɵɵinject(ɵngcc5.Location, 8), ɵngcc0.ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8));\n};\n\nMatBottomSheet.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatBottomSheet,\n  factory: MatBottomSheet.ɵfac,\n  providedIn: MatBottomSheetModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\nMatBottomSheet.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function MatBottomSheet_Factory() {\n    return new MatBottomSheet(inject(Overlay), inject(INJECTOR), inject(MatBottomSheet, 12), inject(Location, 8), inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8));\n  },\n  token: MatBottomSheet,\n  providedIn: MatBottomSheetModule\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies default options to the bottom sheet config.\n * @param {?} defaults Object containing the default values to which to fall back.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\n\n\nfunction _applyConfigDefaults(defaults, config) {\n  return Object.assign({}, defaults, config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatBottomSheetModule, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig, MatBottomSheetContainer, matBottomSheetAnimations, MatBottomSheetRef }; //# sourceMappingURL=bottom-sheet.js.map","map":null,"metadata":{},"sourceType":"module"}