{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\nconst _CdkTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\n\nlet MatTable = /*#__PURE__*/(() => {\n  class MatTable extends _CdkTable {\n    constructor() {\n      super(...arguments);\n      /**\n       * Overrides the sticky CSS class set by the `CdkTable`.\n       */\n\n      this.stickyCssClass = 'mat-table-sticky';\n    }\n\n  }\n\n  MatTable.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTable_BaseFactory;\n    return function MatTable_Factory(t) {\n      return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable);\n    };\n  }();\n\n  MatTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTable,\n    selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n    hostAttrs: [1, \"mat-table\"],\n    exportAs: [\"matTable\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function MatTable_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0)(1, 1)(2, 2);\n      }\n    },\n    dependencies: [ɵngcc1.DataRowOutlet, ɵngcc1.HeaderRowOutlet, ɵngcc1.FooterRowOutlet],\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatTable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst _CdkCellDef = CdkCellDef;\n/** @type {?} */\n\nconst _CdkHeaderCellDef = CdkHeaderCellDef;\n/** @type {?} */\n\nconst _CdkFooterCellDef = CdkFooterCellDef;\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\nlet MatCellDef = /*#__PURE__*/(() => {\n  class MatCellDef extends _CdkCellDef {}\n\n  MatCellDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatCellDef_BaseFactory;\n    return function MatCellDef_Factory(t) {\n      return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef);\n    };\n  }();\n\n  MatCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatCellDef,\n    selectors: [[\"\", \"matCellDef\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkCellDef,\n      useExisting: MatCellDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nlet MatHeaderCellDef = /*#__PURE__*/(() => {\n  class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n  MatHeaderCellDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderCellDef_BaseFactory;\n    return function MatHeaderCellDef_Factory(t) {\n      return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef);\n    };\n  }();\n\n  MatHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatHeaderCellDef,\n    selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkHeaderCellDef,\n      useExisting: MatHeaderCellDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nlet MatFooterCellDef = /*#__PURE__*/(() => {\n  class MatFooterCellDef extends _CdkFooterCellDef {}\n\n  MatFooterCellDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterCellDef_BaseFactory;\n    return function MatFooterCellDef_Factory(t) {\n      return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef);\n    };\n  }();\n\n  MatFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatFooterCellDef,\n    selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkFooterCellDef,\n      useExisting: MatFooterCellDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n\n\nlet MatColumnDef = /*#__PURE__*/(() => {\n  class MatColumnDef extends CdkColumnDef {}\n\n  MatColumnDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatColumnDef_BaseFactory;\n    return function MatColumnDef_Factory(t) {\n      return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef);\n    };\n  }();\n\n  MatColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatColumnDef,\n    selectors: [[\"\", \"matColumnDef\", \"\"]],\n    inputs: {\n      name: [\"matColumnDef\", \"name\"],\n      sticky: \"sticky\",\n      stickyEnd: \"stickyEnd\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkColumnDef,\n      useExisting: MatColumnDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatColumnDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell template container that adds the right classes and role.\n */\n\n\nlet MatHeaderCell = /*#__PURE__*/(() => {\n  class MatHeaderCell extends CdkHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n\n  }\n\n  MatHeaderCell.ɵfac = function MatHeaderCell_Factory(t) {\n    return new (t || MatHeaderCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatHeaderCell,\n    selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatHeaderCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n */\n\n\nlet MatFooterCell = /*#__PURE__*/(() => {\n  class MatFooterCell extends CdkFooterCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n\n  }\n\n  MatFooterCell.ɵfac = function MatFooterCell_Factory(t) {\n    return new (t || MatFooterCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatFooterCell,\n    selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatFooterCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Cell template container that adds the right classes and role.\n */\n\n\nlet MatCell = /*#__PURE__*/(() => {\n  class MatCell extends CdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n\n  }\n\n  MatCell.ɵfac = function MatCell_Factory(t) {\n    return new (t || MatCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatCell,\n    selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst _CdkHeaderRowDef = CdkHeaderRowDef;\n/** @type {?} */\n\nconst _CdkFooterRowDef = CdkFooterRowDef;\n/** @type {?} */\n\nconst _CdkRowDef = CdkRowDef;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\nlet MatHeaderRowDef = /*#__PURE__*/(() => {\n  class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n  MatHeaderRowDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderRowDef_BaseFactory;\n    return function MatHeaderRowDef_Factory(t) {\n      return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef);\n    };\n  }();\n\n  MatHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatHeaderRowDef,\n    selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matHeaderRowDef\", \"columns\"],\n      sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRowDef,\n      useExisting: MatHeaderRowDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nlet MatFooterRowDef = /*#__PURE__*/(() => {\n  class MatFooterRowDef extends _CdkFooterRowDef {}\n\n  MatFooterRowDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterRowDef_BaseFactory;\n    return function MatFooterRowDef_Factory(t) {\n      return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef);\n    };\n  }();\n\n  MatFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatFooterRowDef,\n    selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matFooterRowDef\", \"columns\"],\n      sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkFooterRowDef,\n      useExisting: MatFooterRowDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\n\n\nlet MatRowDef = /*#__PURE__*/(() => {\n  class MatRowDef extends _CdkRowDef {}\n\n  MatRowDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatRowDef_BaseFactory;\n    return function MatRowDef_Factory(t) {\n      return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef);\n    };\n  }();\n\n  MatRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatRowDef,\n    selectors: [[\"\", \"matRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matRowDefColumns\", \"columns\"],\n      when: [\"matRowDefWhen\", \"when\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkRowDef,\n      useExisting: MatRowDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nlet MatHeaderRow = /*#__PURE__*/(() => {\n  class MatHeaderRow extends CdkHeaderRow {}\n\n  MatHeaderRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderRow_BaseFactory;\n    return function MatHeaderRow_Factory(t) {\n      return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow);\n    };\n  }();\n\n  MatHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatHeaderRow,\n    selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n    exportAs: [\"matHeaderRow\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRow,\n      useExisting: MatHeaderRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [ɵngcc1.CdkCellOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatHeaderRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nlet MatFooterRow = /*#__PURE__*/(() => {\n  class MatFooterRow extends CdkFooterRow {}\n\n  MatFooterRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterRow_BaseFactory;\n    return function MatFooterRow_Factory(t) {\n      return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow);\n    };\n  }();\n\n  MatFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatFooterRow,\n    selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n    exportAs: [\"matFooterRow\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkFooterRow,\n      useExisting: MatFooterRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [ɵngcc1.CdkCellOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatFooterRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nlet MatRow = /*#__PURE__*/(() => {\n  class MatRow extends CdkRow {}\n\n  MatRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatRow_BaseFactory;\n    return function MatRow_Factory(t) {\n      return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow);\n    };\n  }();\n\n  MatRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatRow,\n    selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n    exportAs: [\"matRow\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkRow,\n      useExisting: MatRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [ɵngcc1.CdkCellOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst EXPORTED_DECLARATIONS = [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow];\nlet MatTableModule = /*#__PURE__*/(() => {\n  class MatTableModule {}\n\n  MatTableModule.ɵfac = function MatTableModule_Factory(t) {\n    return new (t || MatTableModule)();\n  };\n\n  MatTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTableModule\n  });\n  MatTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CdkTableModule, CommonModule, MatCommonModule]\n  });\n  return MatTableModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableModule, {\n    declarations: function () {\n      return [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow];\n    },\n    imports: function () {\n      return [CdkTableModule, CommonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n  @type {?} */\n\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\n\nclass MatTableDataSource extends DataSource {\n  /**\n   * @param {?=} initialData\n   */\n  constructor(initialData = []) {\n    super();\n    /**\n     * Stream emitting render data to the table (depends on ordered data changes).\n     */\n\n    this._renderData = new BehaviorSubject([]);\n    /**\n     * Stream that emits when a new filter string is set on the data source.\n     */\n\n    this._filter = new BehaviorSubject('');\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n\n    this._renderChangesSubscription = Subscription.EMPTY;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n\n    this.sortingDataAccessor = (data, sortHeaderId) => {\n      /** @type {?} */\n      const value =\n      /** @type {?} */\n      data[sortHeaderId];\n\n      if (_isNumberValue(value)) {\n        /** @type {?} */\n        const numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n\n\n    this.sortData = (data, sort) => {\n      /** @type {?} */\n      const active = sort.active;\n      /** @type {?} */\n\n      const direction = sort.direction;\n\n      if (!active || direction == '') {\n        return data;\n      }\n\n      return data.sort((a, b) => {\n        /** @type {?} */\n        let valueA = this.sortingDataAccessor(a, active);\n        /** @type {?} */\n\n        let valueB = this.sortingDataAccessor(b, active);\n        /** @type {?} */\n\n        let comparatorResult = 0;\n\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @return Whether the filter matches against the data\n     */\n\n\n    this.filterPredicate = (data, filter) => {\n      /** @type {?} */\n      const accumulator = (currentTerm, key) => currentTerm +\n      /** @type {?} */\n      data[key];\n      /** @type {?} */\n\n\n      const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n      /** @type {?} */\n\n      const transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n\n    this._data = new BehaviorSubject(initialData);\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Array of data that should be rendered by the table, where each object represents one row.\n   * @return {?}\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  set data(data) {\n    this._data.next(data);\n  }\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   * @return {?}\n   */\n\n\n  get filter() {\n    return this._filter.value;\n  }\n  /**\n   * @param {?} filter\n   * @return {?}\n   */\n\n\n  set filter(filter) {\n    this._filter.next(filter);\n  }\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   * @return {?}\n   */\n\n\n  get sort() {\n    return this._sort;\n  }\n  /**\n   * @param {?} sort\n   * @return {?}\n   */\n\n\n  set sort(sort) {\n    this._sort = sort;\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   * @return {?}\n   */\n\n\n  get paginator() {\n    return this._paginator;\n  }\n  /**\n   * @param {?} paginator\n   * @return {?}\n   */\n\n\n  set paginator(paginator) {\n    this._paginator = paginator;\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   * @return {?}\n   */\n\n\n  _updateChangeSubscription() {\n    /** @type {?} */\n    const sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n    /** @type {?} */\n\n    const pageChange = this._paginator ? merge(this._paginator.page, this._paginator.initialized) : of(null);\n    /** @type {?} */\n\n    const dataStream = this._data;\n    /** @type {?} */\n\n    const filteredData = combineLatest(dataStream, this._filter).pipe(map(([data]) => this._filterData(data)));\n    /** @type {?} */\n\n    const orderedData = combineLatest(filteredData, sortChange).pipe(map(([data]) => this._orderData(data)));\n    /** @type {?} */\n\n    const paginatedData = combineLatest(orderedData, pageChange).pipe(map(([data]) => this._pageData(data))); // Watched for paged data changes and send the result to the table to render.\n\n    this._renderChangesSubscription.unsubscribe();\n\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData = !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n\n    return this.filteredData;\n  }\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n    /** @type {?} */\n\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   * @param {?} filteredDataLength\n   * @return {?}\n   */\n\n\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) {\n        return;\n      }\n\n      this.paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.\n\n      if (this.paginator.pageIndex > 0) {\n        /** @type {?} */\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  connect() {\n    return this._renderData;\n  }\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  disconnect() {}\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatTableModule, _CdkCellDef, _CdkHeaderCellDef, _CdkFooterCellDef, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, _CdkTable, MatTable, _CdkHeaderRowDef, _CdkFooterRowDef, _CdkRowDef, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource }; //# sourceMappingURL=table.js.map","map":null,"metadata":{},"sourceType":"module"}