{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, supportsPassiveEventListeners, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n\n  const filteredIds = ids.filter(val => val != id.trim());\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\n\n\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\n\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\n\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\n\nlet nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\n\nconst messageRegistry = /*#__PURE__*/new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\n\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\n\nclass AriaDescriber {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  describe(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n  /**\n   * Removes the host element's aria-describedby reference to the message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  removeDescription(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n    /** @type {?} */\n\n\n    const registeredMessage = messageRegistry.get(message);\n\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      this._deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /**\n   * Unregisters all created message elements and removes the message container.\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    /** @type {?} */\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _createMessageElement(message) {\n    /** @type {?} */\n    const messageElement = this._document.createElement('div');\n\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n    messageElement.appendChild(\n    /** @type {?} */\n    this._document.createTextNode(message));\n\n    this._createMessagesContainer();\n    /** @type {?} */\n\n\n    messagesContainer.appendChild(messageElement);\n    messageRegistry.set(message, {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /**\n   * Deletes the message element from the global messages container.\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _deleteMessageElement(message) {\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n\n    messageRegistry.delete(message);\n  }\n  /**\n   * Creates the global container for all aria-describedby messages.\n   * @return {?}\n   */\n\n\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      /** @type {?} */\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n\n\n      if (preExistingContainer) {\n        /** @type {?} */\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.setAttribute('aria-hidden', 'true');\n      messagesContainer.style.display = 'none';\n\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /**\n   * Deletes the global messages container.\n   * @return {?}\n   */\n\n\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /**\n   * Removes all cdk-describedby messages that are hosted through the element.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _removeCdkDescribedByReferenceIds(element) {\n    /** @type {?} */\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _addMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage =\n    /** @type {?} */\n    messageRegistry.get(message); // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _removeMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage =\n    /** @type {?} */\n    messageRegistry.get(message);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /**\n   * Returns true if the element has been described by the provided message ID.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _isElementDescribedByMessage(element, message) {\n    /** @type {?} */\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    /** @type {?} */\n\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /**\n   * Determines whether a message can be described on a particular element.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _canBeDescribed(element, message) {\n    return element.nodeType === this._document.ELEMENT_NODE && message != null && !!`${message}`.trim();\n  }\n\n}\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nAriaDescriber.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nAriaDescriber.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(inject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nconst ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), AriaDescriber],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\n\nclass ListKeyManager {\n  /**\n   * @param {?} _items\n   */\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = item => item.disabled;\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          /** @type {?} */\n          const itemArray = newItems.toArray();\n          /** @type {?} */\n\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {?}\n   */\n\n\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n   * @return {?}\n   */\n\n\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param {?=} enabled Whether vertical selection should be enabled.\n   * @return {?}\n   */\n\n\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param {?} direction Direction in which the selection can be moved.\n   * @return {?}\n   */\n\n\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n   * @return {?}\n   */\n\n\n  withTypeAhead(debounceInterval = 200) {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n\n\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(keyCode => this._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      /** @type {?} */\n      const items = this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n\n\n      for (let i = 1; i < items.length + 1; i++) {\n        /** @type {?} */\n        const index = (this._activeItemIndex + i) % items.length;\n        /** @type {?} */\n\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) &&\n        /** @type {?} */\n        item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  setActiveItem(item) {\n    /** @type {?} */\n    const previousIndex = this._activeItemIndex;\n    this.updateActiveItem(item);\n\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param {?} event Keyboard event to be used for determining which element should be active.\n   * @return {?}\n   */\n\n\n  onKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setNextItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setPreviousItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        } // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n\n\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /**\n   * Index of the currently active item.\n   * @return {?}\n   */\n\n\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /**\n   * The active item.\n   * @return {?}\n   */\n\n\n  get activeItem() {\n    return this._activeItem;\n  }\n  /**\n   * Sets the active item to the first enabled item in the list.\n   * @return {?}\n   */\n\n\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /**\n   * Sets the active item to the last enabled item in the list.\n   * @return {?}\n   */\n\n\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /**\n   * Sets the active item to the next enabled item in the list.\n   * @return {?}\n   */\n\n\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /**\n   * Sets the active item to a previous enabled item in the list.\n   * @return {?}\n   */\n\n\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  updateActiveItem(item) {\n    /** @type {?} */\n    const itemArray = this._getItemsArray();\n    /** @type {?} */\n\n\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    this._activeItemIndex = index;\n    this._activeItem = itemArray[index];\n  }\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @deprecated Use `updateActiveItem` instead.\n   * \\@breaking-change 8.0.0\n   * @param {?} index The new activeItemIndex.\n   * @return {?}\n   */\n\n\n  updateActiveItemIndex(index) {\n    this.updateActiveItem(index);\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveInWrapMode(delta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      /** @type {?} */\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      /** @type {?} */\n\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   * @param {?} index\n   * @param {?} fallbackDelta\n   * @return {?}\n   */\n\n\n  _setActiveItemByIndex(index, fallbackDelta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n  /**\n   * Returns the items as an array.\n   * @return {?}\n   */\n\n\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {?}\n   */\n\n\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  setActiveItem(item) {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nclass InteractivityChecker {\n  /**\n   * @param {?} _platform\n   */\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is disabled.\n   */\n\n\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @param {?} element\n   * @return {?} Whether the element is visible.\n   */\n\n\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is tabbable.\n   */\n\n\n  isTabbable(element) {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    /** @type {?} */\n\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      /** @type {?} */\n      const frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.\n\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n\n\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      } // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n\n\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n    /** @type {?} */\n\n\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    } // In iOS the browser only considers some specific elements as tabbable.\n\n\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is focusable.\n   */\n\n\n  isFocusable(element) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\n}\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nInteractivityChecker.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(inject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return (\n      /** @type {?} */\n      window.frameElement\n    );\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  /** @type {?} */\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n\n  let inputType = nodeName === 'input' &&\n  /** @type {?} */\n  element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\n\n\nclass FocusTrap {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /**\n   * Destroys the focus trap by cleaning up the anchors.\n   * @return {?}\n   */\n\n\n  destroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        /** @type {?} */\n\n        this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        /** @type {?} */\n\n        this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(\n      /** @type {?} */\n      this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(\n      /** @type {?} */\n      this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusInitialElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusLastTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param {?} bound The boundary to get (start or end of trapped region).\n   * @return {?} The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    /** @type {?} */\n    let markers =\n    /** @type {?} */\n    this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusInitialElement() {\n    /** @type {?} */\n    const redirectToElement =\n    /** @type {?} */\n    this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusFirstTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusLastTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   * @return {?}\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /**\n   * Get the first tabbable element from a DOM subtree (inclusive).\n   * @param {?} root\n   * @return {?}\n   */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    /** @type {?} */\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(\n      /** @type {?} */\n      children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Get the last tabbable element from a DOM subtree (inclusive).\n   * @param {?} root\n   * @return {?}\n   */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    /** @type {?} */\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(\n      /** @type {?} */\n      children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Creates an anchor element.\n   * @return {?}\n   */\n\n\n  _createAnchor() {\n    /** @type {?} */\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param {?} isEnabled Whether the focus trap is enabled.\n   * @param {?} anchor Anchor on which to toggle the tabindex.\n   * @return {?}\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Executes a function when the zone is stable.\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\n\n\nclass FocusTrapFactory {\n  /**\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param {?} element The element around which focus will be trapped.\n   * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @return {?} The created focus trap instance.\n   */\n\n\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n\n}\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nFocusTrapFactory.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive for trapping focus within a region.\n */\n\n\nlet CdkTrapFocus = /*#__PURE__*/(() => {\n  class CdkTrapFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    constructor(_elementRef, _focusTrapFactory, _document) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /**\n       * Previously focused element to restore focus to upon destroy when using autoCapture.\n       */\n\n      this._previouslyFocusedElement = null;\n      this._document = _document;\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n\n\n    get enabled() {\n      return this.focusTrap.enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set enabled(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n\n\n    get autoCapture() {\n      return this._autoCapture;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set autoCapture(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._previouslyFocusedElement =\n        /** @type {?} */\n        this._document.activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n\n  }\n\n  CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n    return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTrapFocus,\n    selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n    inputs: {\n      enabled: [\"cdkTrapFocus\", \"enabled\"],\n      autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n    },\n    exportAs: [\"cdkTrapFocus\"]\n  });\n  /** @nocollapse */\n\n  return CdkTrapFocus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = /*#__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nclass LiveAnnouncer {\n  /**\n   * @param {?} elementToken\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(elementToken, _ngZone, _document) {\n    this._ngZone = _ngZone; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  /**\n   * Announces a message to screenreaders.\n   * @param {?} message Message to be announced to the screenreader\n   * @param {?=} politeness The politeness of the announcer element\n   * @return {?} Promise that will be resolved when the message is added to the DOM.\n   */\n\n\n  announce(message, politeness = 'polite') {\n    this._liveElement.textContent = ''; // TODO: ensure changing the politeness works on all environments we support.\n\n    this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n        }, 100);\n      });\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createLiveElement() {\n    /** @type {?} */\n    const elementClass = 'cdk-live-announcer-element';\n    /** @type {?} */\n\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    /** @type {?} */\n\n\n    const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n    for (let i = 0; i < previousElements.length; i++) {\n      /** @type {?} */\n      previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nLiveAnnouncer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nLiveAnnouncer.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nlet CdkAriaLive = /*#__PURE__*/(() => {\n  class CdkAriaLive {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n\n\n    get politeness() {\n      return this._politeness;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set politeness(value) {\n      this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(() => {\n          return this._contentObserver.observe(this._elementRef).subscribe(() => {\n            /** @type {?} */\n            const element = this._elementRef.nativeElement;\n\n            this._liveAnnouncer.announce(element.textContent, this._politeness);\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n    return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAriaLive,\n    selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n    inputs: {\n      politeness: [\"cdkAriaLive\", \"politeness\"]\n    },\n    exportAs: [\"cdkAriaLive\"]\n  });\n  /** @nocollapse */\n\n  return CdkAriaLive;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nconst LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), LiveAnnouncer], [/*#__PURE__*/new Optional(), /*#__PURE__*/new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\n\nclass FocusMonitor {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * The focus origin that the next focus event is a result of.\n     */\n\n    this._origin = null;\n    /**\n     * Whether the window has just been focused.\n     */\n\n    this._windowFocused = false;\n    /**\n     * Map of elements being monitored to their info.\n     */\n\n    this._elementInfo = new Map();\n    /**\n     * A map of global objects to lists of current listeners.\n     */\n\n    this._unregisterGlobalListeners = () => {};\n    /**\n     * The number of elements currently being monitored.\n     */\n\n\n    this._monitoredElementCount = 0;\n  }\n  /**\n   * @param {?} element\n   * @param {?=} checkChildren\n   * @return {?}\n   */\n\n\n  monitor(element, checkChildren = false) {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return of(null);\n    }\n    /** @type {?} */\n\n\n    const nativeElement = this._getNativeElement(element); // Check if we're already monitoring this element.\n\n\n    if (this._elementInfo.has(nativeElement)) {\n      /** @type {?} */\n      let cachedInfo = this._elementInfo.get(nativeElement);\n      /** @type {?} */\n\n\n      cachedInfo.checkChildren = checkChildren;\n      return (\n        /** @type {?} */\n        cachedInfo.subject.asObservable()\n      );\n    }\n    /** @type {?} */\n\n\n    let info = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      subject: new Subject()\n    };\n\n    this._elementInfo.set(nativeElement, info);\n\n    this._incrementMonitoredElementCount();\n    /** @type {?} */\n\n\n    let focusListener = event => this._onFocus(event, nativeElement);\n    /** @type {?} */\n\n\n    let blurListener = event => this._onBlur(event, nativeElement);\n\n    this._ngZone.runOutsideAngular(() => {\n      nativeElement.addEventListener('focus', focusListener, true);\n      nativeElement.addEventListener('blur', blurListener, true);\n    }); // Create an unlisten function for later.\n\n\n    info.unlisten = () => {\n      nativeElement.removeEventListener('focus', focusListener, true);\n      nativeElement.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  stopMonitoring(element) {\n    /** @type {?} */\n    const nativeElement = this._getNativeElement(element);\n    /** @type {?} */\n\n\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n\n      this._elementInfo.delete(nativeElement);\n\n      this._decrementMonitoredElementCount();\n    }\n  }\n  /**\n   * @param {?} element\n   * @param {?} origin\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  focusVia(element, origin, options) {\n    /** @type {?} */\n    const nativeElement = this._getNativeElement(element);\n\n    this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n    if (typeof nativeElement.focus === 'function') {\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n\n      /** @type {?} */\n      nativeElement.focus(options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /**\n   * Register necessary event listeners on the document and window.\n   * @return {?}\n   */\n\n\n  _registerGlobalListeners() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n    /** @type {?} */\n\n\n    let documentKeydownListener = () => {\n      this._lastTouchTarget = null;\n\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n    /** @type {?} */\n\n\n    let documentMousedownListener = () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n    /** @type {?} */\n\n\n    let documentTouchstartListener = event => {\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n\n      this._lastTouchTarget = event.target;\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n    /** @type {?} */\n\n\n    let windowFocusListener = () => {\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    }; // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      document.addEventListener('keydown', documentKeydownListener, true);\n      document.addEventListener('mousedown', documentMousedownListener, true);\n      document.addEventListener('touchstart', documentTouchstartListener, supportsPassiveEventListeners() ?\n      /** @type {?} */\n      {\n        passive: true,\n        capture: true\n      } : true);\n      window.addEventListener('focus', windowFocusListener);\n    });\n\n    this._unregisterGlobalListeners = () => {\n      document.removeEventListener('keydown', documentKeydownListener, true);\n      document.removeEventListener('mousedown', documentMousedownListener, true);\n      document.removeEventListener('touchstart', documentTouchstartListener, supportsPassiveEventListeners() ?\n      /** @type {?} */\n      {\n        passive: true,\n        capture: true\n      } : true);\n      window.removeEventListener('focus', windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    };\n  }\n  /**\n   * @param {?} element\n   * @param {?} className\n   * @param {?} shouldSet\n   * @return {?}\n   */\n\n\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param {?} element The element to update the classes on.\n   * @param {?=} origin The focus origin.\n   * @return {?}\n   */\n\n\n  _setClasses(element, origin) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @param {?} origin The origin to set.\n   * @return {?}\n   */\n\n\n  _setOriginForCurrentEventQueue(origin) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin; // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\n      // the focus origin will be determined at the beginning of the next tick.\n\n      this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n    });\n  }\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param {?} event The focus event to check.\n   * @return {?} Whether the event was caused by a touch.\n   */\n\n\n  _wasCausedByTouch(event) {\n    /** @type {?} */\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @param {?} event The focus event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n\n\n  _onFocus(event, element) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n      return;\n    }\n    /** @type {?} */\n\n\n    let origin = this._origin;\n\n    if (!origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        origin = 'touch';\n      } else {\n        origin = 'program';\n      }\n    }\n\n    this._setClasses(element, origin);\n\n    this._emitOrigin(elementInfo.subject, origin);\n\n    this._lastFocusOrigin = origin;\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param {?} event The blur event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n\n\n  _onBlur(event, element) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element);\n\n    this._emitOrigin(elementInfo.subject, null);\n  }\n  /**\n   * @param {?} subject\n   * @param {?} origin\n   * @return {?}\n   */\n\n\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1) {\n      this._registerGlobalListeners();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (! --this._monitoredElementCount) {\n      this._unregisterGlobalListeners();\n\n      this._unregisterGlobalListeners = () => {};\n    }\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _getNativeElement(element) {\n    return element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n}\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nFocusMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nFocusMonitor.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(inject(NgZone), inject(Platform));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nlet CdkMonitorFocus = /*#__PURE__*/(() => {\n  class CdkMonitorFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(_elementRef, _focusMonitor) {\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this.cdkFocusChange = new EventEmitter();\n      this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._monitorSubscription.unsubscribe();\n    }\n\n  }\n\n  CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n    return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n  };\n\n  CdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkMonitorFocus,\n    selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n    outputs: {\n      cdkFocusChange: \"cdkFocusChange\"\n    }\n  });\n  /** @nocollapse */\n\n  return CdkMonitorFocus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nconst FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet A11yModule = /*#__PURE__*/(() => {\n  class A11yModule {}\n\n  A11yModule.ɵfac = function A11yModule_Factory(t) {\n    return new (t || A11yModule)();\n  };\n\n  A11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: A11yModule\n  });\n  A11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, PlatformModule, ObserversModule]\n  });\n  return A11yModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule }; //# sourceMappingURL=a11y.js.map","map":null,"metadata":{},"sourceType":"module"}