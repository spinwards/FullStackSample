{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass MutationObserverFactory {\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n\n}\n\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\n\nMutationObserverFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MutationObserverFactory,\n  factory: MutationObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMutationObserverFactory.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function MutationObserverFactory_Factory() {\n    return new MutationObserverFactory();\n  },\n  token: MutationObserverFactory,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\n\n\nclass ContentObserver {\n  /**\n   * @param {?} _mutationObserverFactory\n   */\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /**\n     * Keeps track of the existing MutationObservers so they can be reused.\n     */\n\n    this._observedElements = new Map();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  observe(elementOrRef) {\n    /** @type {?} */\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    return Observable.create(observer => {\n      /** @type {?} */\n      const stream = this._observeElement(element);\n      /** @type {?} */\n\n\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n\n        this._unobserveElement(element);\n      };\n    });\n  }\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      /** @type {?} */\n      const stream = new Subject();\n      /** @type {?} */\n\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n\n      this._observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      /** @type {?} */\n      this._observedElements.get(element).count++;\n    }\n\n    return (\n      /** @type {?} */\n      this._observedElements.get(element).stream\n    );\n  }\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      /** @type {?} */\n      this._observedElements.get(element).count--;\n\n      if (!\n      /** @type {?} */\n      this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n  /**\n   * Clean up the underlying MutationObserver for the specified element.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } =\n      /** @type {?} */\n      this._observedElements.get(element);\n\n      if (observer) {\n        observer.disconnect();\n      }\n\n      stream.complete();\n\n      this._observedElements.delete(element);\n    }\n  }\n\n}\n\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n};\n\nContentObserver.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ContentObserver,\n  factory: ContentObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nContentObserver.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function ContentObserver_Factory() {\n    return new ContentObserver(inject(MutationObserverFactory));\n  },\n  token: ContentObserver,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n\n\nlet CdkObserveContent = /*#__PURE__*/(() => {\n  class CdkObserveContent {\n    /**\n     * @param {?} _contentObserver\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_contentObserver, _elementRef, _ngZone) {\n      this._contentObserver = _contentObserver;\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      /**\n       * Event emitted for each change in the element's content.\n       */\n\n      this.event = new EventEmitter();\n      this._disabled = false;\n      this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n      this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /**\n     * Debounce interval for emitting the changes.\n     * @return {?}\n     */\n\n\n    get debounce() {\n      return this._debounce;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set debounce(value) {\n      this._debounce = coerceNumberProperty(value);\n\n      this._subscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _subscribe() {\n      this._unsubscribe();\n      /** @type {?} */\n\n\n      const stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n      // Consider brining it back inside the zone next time we're making breaking changes.\n      // Bringing it back inside can cause things like infinite change detection loops and changed\n      // after checked errors if people's code isn't handling it properly.\n\n\n      this._ngZone.runOutsideAngular(() => {\n        this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _unsubscribe() {\n      if (this._currentSubscription) {\n        this._currentSubscription.unsubscribe();\n      }\n    }\n\n  }\n\n  CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n    return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkObserveContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkObserveContent,\n    selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n    inputs: {\n      disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n      debounce: \"debounce\"\n    },\n    outputs: {\n      event: \"cdkObserveContent\"\n    },\n    exportAs: [\"cdkObserveContent\"]\n  });\n  /** @nocollapse */\n\n  return CdkObserveContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ObserversModule = /*#__PURE__*/(() => {\n  class ObserversModule {}\n\n  ObserversModule.ɵfac = function ObserversModule_Factory(t) {\n    return new (t || ObserversModule)();\n  };\n\n  ObserversModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ObserversModule\n  });\n  ObserversModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MutationObserverFactory]\n  });\n  return ObserversModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule }; //# sourceMappingURL=observers.js.map","map":null,"metadata":{},"sourceType":"module"}