{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, DataSource } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The injection token used to specify the virtual scrolling strategy.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\n\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /**\n     * The attached viewport.\n     */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n\n\n  attach(viewport) {\n    this._viewport = viewport;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /**\n   * Detaches this scroll strategy from the currently attached viewport.\n   * @return {?}\n   */\n\n\n  detach() {\n    this._scrolledIndexChange.complete();\n\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   * @return {?}\n   */\n\n\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onContentRendered() {\n    /* no-op */\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n\n\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n  /**\n   * Scroll to the offset for the given index.\n   * @param {?} index The index of the element to scroll to.\n   * @param {?} behavior The ScrollBehavior to use when scrolling.\n   * @return {?}\n   */\n\n\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /**\n   * Update the viewport's total content size.\n   * @return {?}\n   */\n\n\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /**\n   * Update the viewport's rendered range.\n   * @return {?}\n   */\n\n\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    /** @type {?} */\n\n\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    /** @type {?} */\n\n    const renderedRange = this._viewport.getRenderedRange();\n    /** @type {?} */\n\n\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n    /** @type {?} */\n\n    const viewportSize = this._viewport.getViewportSize();\n    /** @type {?} */\n\n\n    const dataLength = this._viewport.getDataLength();\n    /** @type {?} */\n\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      /** @type {?} */\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      /** @type {?} */\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        /** @type {?} */\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\n\n\nlet CdkFixedSizeVirtualScroll = /*#__PURE__*/(() => {\n  class CdkFixedSizeVirtualScroll {\n    constructor() {\n      this._itemSize = 20;\n      this._minBufferPx = 100;\n      this._maxBufferPx = 200;\n      /**\n       * The scroll strategy used by this directive.\n       */\n\n      this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n\n\n    get itemSize() {\n      return this._itemSize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set itemSize(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n\n\n    get minBufferPx() {\n      return this._minBufferPx;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set minBufferPx(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n\n\n    get maxBufferPx() {\n      return this._maxBufferPx;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set maxBufferPx(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n\n  }\n\n  CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n    return new (t || CdkFixedSizeVirtualScroll)();\n  };\n\n  CdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkFixedSizeVirtualScroll,\n    selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n    inputs: {\n      itemSize: \"itemSize\",\n      minBufferPx: \"minBufferPx\",\n      maxBufferPx: \"maxBufferPx\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkFixedSizeVirtualScroll;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle the scrolling events by default.\n  @type {?} */\n\n\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nclass ScrollDispatcher {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     */\n\n    this._scrolled = new Subject();\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     */\n\n    this._globalSubscription = null;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param {?} scrollable Scrollable instance to be registered.\n   * @return {?}\n   */\n\n\n  register(scrollable) {\n    /** @type {?} */\n    const scrollSubscription = scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable));\n    this.scrollContainers.set(scrollable, scrollSubscription);\n  }\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param {?} scrollable Scrollable instance to be deregistered.\n   * @return {?}\n   */\n\n\n  deregister(scrollable) {\n    /** @type {?} */\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   * @param {?=} auditTimeInMs\n   * @return {?}\n   */\n\n\n  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n    if (!this._platform.isBrowser) {\n      return of();\n    }\n\n    return Observable.create(observer => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n      /** @type {?} */\n\n\n      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n      this._scrolledCount++;\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n\n    this._scrolled.complete();\n  }\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param {?} elementRef Element whose ancestors to listen for.\n   * @param {?=} auditTimeInMs Time to throttle the scroll events.\n   * @return {?}\n   */\n\n\n  ancestorScrolled(elementRef, auditTimeInMs) {\n    /** @type {?} */\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n  /**\n   * Returns all registered Scrollables that contain the provided element.\n   * @param {?} elementRef\n   * @return {?}\n   */\n\n\n  getAncestorScrollContainers(elementRef) {\n    /** @type {?} */\n    const scrollingContainers = [];\n    this.scrollContainers.forEach((_subscription, scrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n    return scrollingContainers;\n  }\n  /**\n   * Returns true if the element is contained within the provided Scrollable.\n   * @param {?} scrollable\n   * @param {?} elementRef\n   * @return {?}\n   */\n\n\n  _scrollableContainsElement(scrollable, elementRef) {\n    /** @type {?} */\n    let element = elementRef.nativeElement;\n    /** @type {?} */\n\n    let scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while (element =\n    /** @type {?} */\n    element.parentElement);\n\n    return false;\n  }\n  /**\n   * Sets up the global scroll listeners.\n   * @return {?}\n   */\n\n\n  _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n  /**\n   * Cleans up the global scroll listener.\n   * @return {?}\n   */\n\n\n  _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n\n      this._globalSubscription = null;\n    }\n  }\n\n}\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nScrollDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollDispatcher,\n  factory: ScrollDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nScrollDispatcher.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(inject(NgZone), inject(Platform));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nconst SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\nlet CdkScrollable = /*#__PURE__*/(() => {\n  class CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      this.elementRef = elementRef;\n      this.scrollDispatcher = scrollDispatcher;\n      this.ngZone = ngZone;\n      this.dir = dir;\n      this._destroyed = new Subject();\n      this._elementScrolled = Observable.create(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n\n\n    elementScrolled() {\n      return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n\n\n    getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n\n\n    scrollTo(options) {\n      /** @type {?} */\n      const el = this.elementRef.nativeElement;\n      /** @type {?} */\n\n      const isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      options.left = options.left == null ? isRtl ? options.end : options.start : options.left;\n      options.right = options.right == null ? isRtl ? options.start : options.end : options.right; // Rewrite the bottom offset as a top offset.\n\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n\n        if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n\n\n    _applyScrollToOptions(options) {\n      /** @type {?} */\n      const el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n\n\n    measureScrollOffset(from) {\n      /** @type {?} */\n      const LEFT = 'left';\n      /** @type {?} */\n\n      const RIGHT = 'right';\n      /** @type {?} */\n\n      const el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      }\n      /** @type {?} */\n\n\n      const isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n\n  }\n\n  CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n    return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  CdkScrollable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkScrollable,\n    selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n  });\n  /** @nocollapse */\n\n  return CdkScrollable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\n\n\nlet CdkVirtualScrollViewport = /*#__PURE__*/(() => {\n  class CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n      this.elementRef = elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollStrategy = _scrollStrategy;\n      /**\n       * Emits when the viewport is detached from a CdkVirtualForOf.\n       */\n\n      this._detachedSubject = new Subject();\n      /**\n       * Emits when the rendered range changes.\n       */\n\n      this._renderedRangeSubject = new Subject();\n      /**\n       * The direction the viewport scrolls.\n       */\n\n      this.orientation = 'vertical';\n      /**\n       * Emits when the index of the first element visible in the viewport changes.\n       */\n\n      this.scrolledIndexChange = Observable.create(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n      /**\n       * A stream that emits whenever the rendered range changes.\n       */\n\n      this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n      /**\n       * The transform used to scale the spacer to the same size as all content, including content that\n       * is not currently rendered.\n       */\n\n      this._totalContentSizeTransform = '';\n      /**\n       * The total size of all content (in pixels), including content that is not currently rendered.\n       */\n\n      this._totalContentSize = 0;\n      /**\n       * The currently rendered range of indices.\n       */\n\n      this._renderedRange = {\n        start: 0,\n        end: 0\n      };\n      /**\n       * The length of the data bound to this viewport (in number of items).\n       */\n\n      this._dataLength = 0;\n      /**\n       * The size of the viewport (in pixels).\n       */\n\n      this._viewportSize = 0;\n      /**\n       * The last rendered content offset that was set.\n       */\n\n      this._renderedContentOffset = 0;\n      /**\n       * Whether the last rendered content offset was to the end of the content (and therefore needs to\n       * be rewritten as an offset to the start of the content).\n       */\n\n      this._renderedContentOffsetNeedsRewrite = false;\n      /**\n       * Whether there is a pending change detection cycle.\n       */\n\n      this._isChangeDetectionPending = false;\n      /**\n       * A list of functions to run after the next change detection cycle.\n       */\n\n      this._runAfterChangeDetection = [];\n\n      if (!_scrollStrategy) {\n        throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit(); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._measureViewportSize();\n\n        this._scrollStrategy.attach(this);\n\n        this.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n        startWith(\n        /** @type {?} */\n        null), // Collect multiple events into one until the next animation frame. This way if\n        // there are multiple scroll events in the same frame we only need to recheck\n        // our layout once.\n        auditTime(0, animationFrameScheduler)).subscribe(() => this._scrollStrategy.onContentScrolled());\n\n        this._markChangeDetectionNeeded();\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n\n\n    attach(forOf) {\n      if (this._forOf) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(() => {\n        this._forOf = forOf;\n\n        this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n          /** @type {?} */\n          const newLength = data.length;\n\n          if (newLength !== this._dataLength) {\n            this._dataLength = newLength;\n\n            this._scrollStrategy.onDataLengthChanged();\n          }\n\n          this._doChangeDetection();\n        });\n      });\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n\n\n    detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n\n\n    getDataLength() {\n      return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n\n\n    getViewportSize() {\n      return this._viewportSize;\n    }\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n\n\n    getRenderedRange() {\n      return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n\n\n    setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n        /** @type {?} */\n\n        const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n        this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n\n\n    setRenderedRange(range) {\n      if (!rangesEqual(this._renderedRange, range)) {\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n\n\n    getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n\n\n    setRenderedContentOffset(offset, to = 'to-start') {\n      /** @type {?} */\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      /** @type {?} */\n\n      const isHorizontal = this.orientation == 'horizontal';\n      /** @type {?} */\n\n      const axis = isHorizontal ? 'X' : 'Y';\n      /** @type {?} */\n\n      const axisDirection = isHorizontal && isRtl ? -1 : 1;\n      /** @type {?} */\n\n      let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += ` translate${axis}(-100%)`; // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(() => {\n          if (this._renderedContentOffsetNeedsRewrite) {\n            this._renderedContentOffset -= this.measureRenderedContentSize();\n            this._renderedContentOffsetNeedsRewrite = false;\n            this.setRenderedContentOffset(this._renderedContentOffset);\n          } else {\n            this._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n\n\n    scrollToOffset(offset, behavior = 'auto') {\n      /** @type {?} */\n      const options = {\n        behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n\n\n    scrollToIndex(index, behavior = 'auto') {\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n\n\n    measureScrollOffset(from) {\n      return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n\n\n    measureRenderedContentSize() {\n      /** @type {?} */\n      const contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n\n\n    measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n\n\n    checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @return {?}\n     */\n\n\n    _measureViewportSize() {\n      /** @type {?} */\n      const viewportEl = this.elementRef.nativeElement;\n      this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @param {?=} runAfter\n     * @return {?}\n     */\n\n\n    _markChangeDetectionNeeded(runAfter) {\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }));\n      }\n    }\n    /**\n     * Run change detection.\n     * @return {?}\n     */\n\n\n    _doChangeDetection() {\n      this._isChangeDetectionPending = false; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(() => this._changeDetectorRef.markForCheck()); // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n      /** @type {?} */\n\n      const runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      for (const fn of runAfterChangeDetection) {\n        fn();\n      }\n    }\n\n  }\n\n  CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n    return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher));\n  };\n\n  CdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkVirtualScrollViewport,\n    selectors: [[\"cdk-virtual-scroll-viewport\"]],\n    viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n      }\n    },\n    hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n    hostVars: 4,\n    hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation === \"vertical\");\n      }\n    },\n    inputs: {\n      orientation: \"orientation\"\n    },\n    outputs: {\n      scrolledIndexChange: \"scrolledIndexChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n    template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"transform\", ctx._totalContentSizeTransform);\n      }\n    },\n    styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return CdkVirtualScrollViewport;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getSize(orientation, node) {\n  /** @type {?} */\n  const el =\n  /** @type {?} */\n  node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  /** @type {?} */\n\n\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\n\n\nlet CdkVirtualForOf = /*#__PURE__*/(() => {\n  class CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs,\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n      this._viewContainerRef = _viewContainerRef;\n      this._template = _template;\n      this._differs = _differs;\n      this._viewport = _viewport;\n      /**\n       * Emits when the rendered view of the data changes.\n       */\n\n      this.viewChange = new Subject();\n      /**\n       * Subject that emits when a new DataSource instance is given.\n       */\n\n      this._dataSourceChanges = new Subject();\n      /**\n       * The size of the cache used to store templates that are not being used for re-use later.\n       * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n       */\n\n      this.cdkVirtualForTemplateCacheSize = 20;\n      /**\n       * Emits whenever the data in the current DataSource changes.\n       */\n\n      this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n      startWith(\n      /** @type {?} */\n      null), // Bundle up the previous and current data sources so we can work with both.\n      pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n      // new one, passing back a stream of data changes which we run through `switchMap` to give\n      // us a data stream that emits the latest data from whatever the current `DataSource` is.\n      switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), // Replay the last emitted data when someone subscribes.\n      shareReplay(1));\n      /**\n       * The differ used to calculate changes to the data.\n       */\n\n      this._differ = null;\n      /**\n       * The template cache used to hold on ot template instancess that have been stamped out, but don't\n       * currently need to be rendered. These instances will be reused in the future rather than\n       * stamping out brand new ones.\n       */\n\n      this._templateCache = [];\n      /**\n       * Whether the rendered data should be updated during the next ngDoCheck cycle.\n       */\n\n      this._needsUpdate = false;\n      this._destroyed = new Subject();\n      this.dataStream.subscribe(data => {\n        this._data = data;\n\n        this._onRenderedDataChange();\n      });\n\n      this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n        this._renderedRange = range;\n        ngZone.run(() => this.viewChange.next(this._renderedRange));\n\n        this._onRenderedDataChange();\n      });\n\n      this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n\n\n    get cdkVirtualForOf() {\n      return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set cdkVirtualForOf(value) {\n      this._cdkVirtualForOf = value;\n      /** @type {?} */\n\n      const ds = value instanceof DataSource ? value : // Slice the value if its an NgIterable to ensure we're working with an array.\n      new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n\n      this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n\n\n    get cdkVirtualForTrackBy() {\n      return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    set cdkVirtualForTrackBy(fn) {\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set cdkVirtualForTemplate(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n\n\n    measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n        throw Error(`Error: attempted to measure an item that isn't rendered.`);\n      }\n      /** @type {?} */\n\n\n      const renderedStartIndex = range.start - this._renderedRange.start;\n      /** @type {?} */\n\n      const rangeLen = range.end - range.start;\n      /** @type {?} */\n\n      let totalSize = 0;\n      /** @type {?} */\n\n      let i = rangeLen;\n\n      while (i--) {\n        /** @type {?} */\n        const view =\n        /** @type {?} */\n        this._viewContainerRef.get(i + renderedStartIndex);\n        /** @type {?} */\n\n\n        let j = view ? view.rootNodes.length : 0;\n\n        while (j--) {\n          totalSize += getSize(orientation,\n          /** @type {?} */\n          view.rootNodes[j]);\n        }\n      }\n\n      return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        /** @type {?} */\n        const changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      for (let view of this._templateCache) {\n        view.destroy();\n      }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @return {?}\n     */\n\n\n    _onRenderedDataChange() {\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n      }\n\n      this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n\n\n    _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs.connect(this);\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @return {?}\n     */\n\n\n    _updateContext() {\n      /** @type {?} */\n      const count = this._data.length;\n      /** @type {?} */\n\n      let i = this._viewContainerRef.length;\n\n      while (i--) {\n        /** @type {?} */\n        let view =\n        /** @type {?} */\n        this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _applyChanges(changes) {\n      // Rearrange the views to put them in the right location.\n      changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n        if (record.previousIndex == null) {\n          // Item added.\n\n          /** @type {?} */\n          const view = this._getViewForNewItem();\n\n          this._viewContainerRef.insert(view,\n          /** @type {?} */\n          currentIndex);\n\n          view.context.$implicit = record.item;\n        } else if (currentIndex == null) {\n          // Item removed.\n          // Item removed.\n          this._cacheView(\n          /** @type {?} */\n          this._viewContainerRef.detach(\n          /** @type {?} */\n          adjustedPreviousIndex));\n        } else {\n          // Item moved.\n\n          /** @type {?} */\n          const view =\n          /** @type {?} */\n          this._viewContainerRef.get(\n          /** @type {?} */\n          adjustedPreviousIndex);\n\n          this._viewContainerRef.move(view, currentIndex);\n\n          view.context.$implicit = record.item;\n        }\n      }); // Update $implicit for any items that had an identity change.\n\n      changes.forEachIdentityChange(record => {\n        /** @type {?} */\n        const view =\n        /** @type {?} */\n        this._viewContainerRef.get(\n        /** @type {?} */\n        record.currentIndex);\n\n        view.context.$implicit = record.item;\n      });\n      /** @type {?} */\n\n      const count = this._data.length;\n      /** @type {?} */\n\n      let i = this._viewContainerRef.length;\n\n      while (i--) {\n        /** @type {?} */\n        const view =\n        /** @type {?} */\n        this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /**\n     * Cache the given detached view.\n     * @param {?} view\n     * @return {?}\n     */\n\n\n    _cacheView(view) {\n      if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n        this._templateCache.push(view);\n      } else {\n        view.destroy();\n      }\n    }\n    /**\n     * Get a view for a new item, either from the cache or by creating a new one.\n     * @return {?}\n     */\n\n\n    _getViewForNewItem() {\n      return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n        $implicit:\n        /** @type {?} */\n        null,\n        cdkVirtualForOf: this._cdkVirtualForOf,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false\n      });\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @param {?} context\n     * @return {?}\n     */\n\n\n    _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n\n  }\n\n  CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n    return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkVirtualForOf.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkVirtualForOf,\n    selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n    inputs: {\n      cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\",\n      cdkVirtualForOf: \"cdkVirtualForOf\",\n      cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n      cdkVirtualForTemplate: \"cdkVirtualForTemplate\"\n    }\n  });\n  /** @nocollapse */\n\n  return CdkVirtualForOf;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet ScrollingModule = /*#__PURE__*/(() => {\n  class ScrollingModule {}\n\n  ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n    return new (t || ScrollingModule)();\n  };\n\n  ScrollingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ScrollingModule\n  });\n  ScrollingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [BidiModule, PlatformModule, BidiModule]\n  });\n  return ScrollingModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function () {\n      return [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function () {\n      return [BidiModule, PlatformModule];\n    },\n    exports: function () {\n      return [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\n\n\nlet ScrollDispatchModule = /*#__PURE__*/(() => {\n  class ScrollDispatchModule {}\n\n  ScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) {\n    return new (t || ScrollDispatchModule)();\n  };\n\n  ScrollDispatchModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ScrollDispatchModule\n  });\n  ScrollDispatchModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ScrollingModule, ScrollingModule]\n  });\n  return ScrollDispatchModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, {\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Time in ms to throttle the resize events by default.\n  @type {?} */\n\n\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\n\nclass ViewportRuler {\n  /**\n   * @param {?} _platform\n   * @param {?} ngZone\n   */\n  constructor(_platform, ngZone) {\n    this._platform = _platform;\n    ngZone.runOutsideAngular(() => {\n      this._change = _platform.isBrowser ? merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) : of(); // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n  /**\n   * Returns the viewport's width and height.\n   * @return {?}\n   */\n\n\n  getViewportSize() {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n    /** @type {?} */\n\n\n    const output = {\n      width: this._viewportSize.width,\n      height: this._viewportSize.height\n    }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n    if (!this._platform.isBrowser) {\n      this._viewportSize =\n      /** @type {?} */\n      null;\n    }\n\n    return output;\n  }\n  /**\n   * Gets a ClientRect for the viewport's bounds.\n   * @return {?}\n   */\n\n\n  getViewportRect() {\n    /** @type {?} */\n    const scrollPosition = this.getViewportScrollPosition();\n    const {\n      width,\n      height\n    } = this.getViewportSize();\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width\n    };\n  }\n  /**\n   * Gets the (top, left) scroll position of the viewport.\n   * @return {?}\n   */\n\n\n  getViewportScrollPosition() {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    /** @type {?} */\n\n\n    const documentElement =\n    /** @type {?} */\n    document.documentElement;\n    /** @type {?} */\n\n    const documentRect = documentElement.getBoundingClientRect();\n    /** @type {?} */\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n    /** @type {?} */\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n   * @return {?}\n   */\n\n\n  change(throttleTime = DEFAULT_RESIZE_TIME) {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n  /**\n   * Updates the cached viewport size.\n   * @return {?}\n   */\n\n\n  _updateViewportSize() {\n    this._viewportSize = this._platform.isBrowser ? {\n      width: window.innerWidth,\n      height: window.innerHeight\n    } : {\n      width: 0,\n      height: 0\n    };\n  }\n\n}\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nViewportRuler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ViewportRuler,\n  factory: ViewportRuler.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nViewportRuler.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(inject(Platform), inject(NgZone));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\n\n\nconst VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport }; //# sourceMappingURL=scrolling.js.map","map":null,"metadata":{},"sourceType":"module"}