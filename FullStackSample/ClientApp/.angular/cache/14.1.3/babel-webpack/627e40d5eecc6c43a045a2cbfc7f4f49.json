{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone, TemplateRef, ChangeDetectionStrategy, Component, ContentChild, Input, ViewChild, ViewContainerRef, ViewEncapsulation, ChangeDetectorRef, Output, EventEmitter, Optional, ComponentFactoryResolver, forwardRef, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\nimport { mixinDisabled, mixinDisableRipple, mixinColor, MAT_RIPPLE_GLOBAL_OPTIONS, mixinTabIndex, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, takeUntil } from 'rxjs/operators';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token for the MatInkBar's Positioner.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\nimport * as ɵngcc5 from '@angular/common';\nimport * as ɵngcc6 from '@angular/cdk/portal';\nimport * as ɵngcc7 from '@angular/cdk/a11y';\nimport * as ɵngcc8 from '@angular/cdk/platform';\n\nfunction MatTab_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nconst _c0 = [\"*\"];\n\nfunction MatTabBody_ng_template_2_Template(rf, ctx) {}\n\nconst _c1 = [\"tabListContainer\"];\nconst _c2 = [\"tabList\"];\nconst _c3 = [\"tabBodyWrapper\"];\nconst _c4 = [\"tabHeader\"];\n\nfunction MatTabGroup_div_2_ng_template_2_ng_template_0_Template(rf, ctx) {}\n\nfunction MatTabGroup_div_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, MatTabGroup_div_2_ng_template_2_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n\n  if (rf & 2) {\n    const tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", tab_r4.templateLabel);\n  }\n}\n\nfunction MatTabGroup_div_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵtextInterpolate(tab_r4.textLabel);\n  }\n}\n\nfunction MatTabGroup_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTabGroup_div_2_Template_div_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12);\n      const tab_r4 = restoredCtx.$implicit;\n      const i_r5 = restoredCtx.index;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      return ɵngcc0.ɵɵresetView(ctx_r11._handleClick(tab_r4, _r0, i_r5));\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_ng_template_2_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵtemplate(3, MatTabGroup_div_2_ng_template_3_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tab_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-label-active\", ctx_r1.selectedIndex == i_r5);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1._getTabLabelId(i_r5))(\"disabled\", tab_r4.disabled)(\"matRippleDisabled\", tab_r4.disabled || ctx_r1.disableRipple);\n    ɵngcc0.ɵɵattribute(\"tabIndex\", ctx_r1._getTabIndex(tab_r4, i_r5))(\"aria-posinset\", i_r5 + 1)(\"aria-setsize\", ctx_r1._tabs.length)(\"aria-controls\", ctx_r1._getTabContentId(i_r5))(\"aria-selected\", ctx_r1.selectedIndex == i_r5)(\"aria-label\", tab_r4.ariaLabel || null)(\"aria-labelledby\", !tab_r4.ariaLabel && tab_r4.ariaLabelledby ? tab_r4.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", tab_r4.templateLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !tab_r4.templateLabel);\n  }\n}\n\nfunction MatTabGroup_mat_tab_body_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-tab-body\", 10);\n    ɵngcc0.ɵɵlistener(\"_onCentered\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentered_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r15._removeTabBodyWrapperHeight());\n    })(\"_onCentering\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentering_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r17._setTabBodyWrapperHeight($event));\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-body-active\", ctx_r3.selectedIndex == i_r14);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r3._getTabContentId(i_r14))(\"content\", tab_r13.content)(\"position\", tab_r13.position)(\"origin\", tab_r13.origin);\n    ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx_r3._getTabLabelId(i_r14));\n  }\n}\n\nconst _c5 = [\"mat-tab-nav-bar\", \"\"];\n\nconst _MAT_INK_BAR_POSITIONER = /*#__PURE__*/new InjectionToken('MatInkBarPositioner', {\n  providedIn: 'root',\n  factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n  /** @type {?} */\n  const method = element => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0'\n  });\n\n  return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\n\n\nlet MatInkBar = /*#__PURE__*/(() => {\n  class MatInkBar {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _inkBarPositioner\n     */\n    constructor(_elementRef, _ngZone, _inkBarPositioner) {\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      this._inkBarPositioner = _inkBarPositioner;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    alignToElement(element) {\n      this.show();\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(() => {\n          requestAnimationFrame(() => this._setStyles(element));\n        });\n      } else {\n        this._setStyles(element);\n      }\n    }\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n\n\n    show() {\n      this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n\n\n    hide() {\n      this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    _setStyles(element) {\n      /** @type {?} */\n      const positions = this._inkBarPositioner(element);\n      /** @type {?} */\n\n\n      const inkBar = this._elementRef.nativeElement;\n      inkBar.style.left = positions.left;\n      inkBar.style.width = positions.width;\n    }\n\n  }\n\n  MatInkBar.ɵfac = function MatInkBar_Factory(t) {\n    return new (t || MatInkBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(_MAT_INK_BAR_POSITIONER));\n  };\n\n  MatInkBar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatInkBar,\n    selectors: [[\"mat-ink-bar\"]],\n    hostAttrs: [1, \"mat-ink-bar\"]\n  });\n  /** @nocollapse */\n\n  return MatInkBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Decorates the `ng-template` tags and reads out the template from it.\n */\n\n\nlet MatTabContent = /*#__PURE__*/(() => {\n  class MatTabContent {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  MatTabContent.ɵfac = function MatTabContent_Factory(t) {\n    return new (t || MatTabContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  MatTabContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTabContent,\n    selectors: [[\"\", \"matTabContent\", \"\"]]\n  });\n  /** @nocollapse */\n\n  return MatTabContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst _CdkPortal = CdkPortal;\n/**\n * Used to flag tab labels for use with the portal directive\n */\n\nlet MatTabLabel = /*#__PURE__*/(() => {\n  class MatTabLabel extends _CdkPortal {}\n\n  MatTabLabel.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTabLabel_BaseFactory;\n    return function MatTabLabel_Factory(t) {\n      return (ɵMatTabLabel_BaseFactory || (ɵMatTabLabel_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTabLabel)))(t || MatTabLabel);\n    };\n  }();\n\n  MatTabLabel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTabLabel,\n    selectors: [[\"\", \"mat-tab-label\", \"\"], [\"\", \"matTabLabel\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTabLabel;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nclass MatTabBase {}\n/** @type {?} */\n\n\nconst _MatTabMixinBase = /*#__PURE__*/mixinDisabled(MatTabBase);\n\nlet MatTab = /*#__PURE__*/(() => {\n  class MatTab extends _MatTabMixinBase {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n      super();\n      this._viewContainerRef = _viewContainerRef;\n      /**\n       * Plain text label for the tab, used when there is no template label.\n       */\n\n      this.textLabel = '';\n      /**\n       * Portal that will be the hosted content of the tab\n       */\n\n      this._contentPortal = null;\n      /**\n       * Emits whenever the internal state of the tab changes.\n       */\n\n      this._stateChanges = new Subject();\n      /**\n       * The relatively indexed position where 0 represents the center, negative is left, and positive\n       * represents the right.\n       */\n\n      this.position = null;\n      /**\n       * The initial relatively index origin of the tab if it was created and selected after there\n       * was already a selected tab. Provides context of what position the tab should originate from.\n       */\n\n      this.origin = null;\n      /**\n       * Whether the tab is currently active.\n       */\n\n      this.isActive = false;\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    get content() {\n      return this._contentPortal;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n        this._stateChanges.next();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n\n  }\n\n  MatTab.ɵfac = function MatTab_Factory(t) {\n    return new (t || MatTab)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  MatTab.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTab,\n    selectors: [[\"mat-tab\"]],\n    contentQueries: function MatTab_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabel, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabContent, 5, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateLabel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._explicitContent = _t.first);\n      }\n    },\n    viewQuery: function MatTab_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._implicitContent = _t.first);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      textLabel: [\"label\", \"textLabel\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"]\n    },\n    exportAs: [\"matTab\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatTab_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatTab_ng_template_0_Template, 1, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatTab;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Animations used by the Material tabs.\n * \\@docs-private\n  @type {?} */\n\n\nconst matTabsAnimations = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: /*#__PURE__*/trigger('translateTab', [\n  /*#__PURE__*/\n  // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n  state('center, void, left-origin-center, right-origin-center', /*#__PURE__*/style({\n    transform: 'none'\n  })),\n  /*#__PURE__*/\n  // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n  // in order to ensure that the element has a height before its state changes. This is\n  // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n  // not have a static height and is not rendered. See related issue: #9465\n  state('left', /*#__PURE__*/style({\n    transform: 'translate3d(-100%, 0, 0)',\n    minHeight: '1px'\n  })), /*#__PURE__*/state('right', /*#__PURE__*/style({\n    transform: 'translate3d(100%, 0, 0)',\n    minHeight: '1px'\n  })), /*#__PURE__*/transition('* => left, * => right, left => center, right => center', /*#__PURE__*/animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')), /*#__PURE__*/transition('void => left-origin-center', [/*#__PURE__*/style({\n    transform: 'translate3d(-100%, 0, 0)'\n  }), /*#__PURE__*/animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')]), /*#__PURE__*/transition('void => right-origin-center', [/*#__PURE__*/style({\n    transform: 'translate3d(100%, 0, 0)'\n  }), /*#__PURE__*/animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')])])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The portal host directive for the contents of the tab.\n * \\@docs-private\n */\n\nlet MatTabBodyPortal = /*#__PURE__*/(() => {\n  class MatTabBodyPortal extends CdkPortalOutlet {\n    /**\n     * @param {?} componentFactoryResolver\n     * @param {?} viewContainerRef\n     * @param {?} _host\n     */\n    constructor(componentFactoryResolver, viewContainerRef, _host) {\n      super(componentFactoryResolver, viewContainerRef);\n      this._host = _host;\n      /**\n       * Subscription to events for when the tab body begins centering.\n       */\n\n      this._centeringSub = Subscription.EMPTY;\n      /**\n       * Subscription to events for when the tab body finishes leaving from center position.\n       */\n\n      this._leavingSub = Subscription.EMPTY;\n    }\n    /**\n     * Set initial visibility or set up subscription for changing visibility.\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this._centeringSub = this._host._beforeCentering.pipe(startWith(this._host._isCenterPosition(this._host._position))).subscribe(isCentering => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n      this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n        this.detach();\n      });\n    }\n    /**\n     * Clean up centering subscription.\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      this._centeringSub.unsubscribe();\n\n      this._leavingSub.unsubscribe();\n    }\n\n  }\n\n  MatTabBodyPortal.ɵfac = function MatTabBodyPortal_Factory(t) {\n    return new (t || MatTabBodyPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatTabBody)));\n  };\n\n  MatTabBodyPortal.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTabBodyPortal,\n    selectors: [[\"\", \"matTabBodyHost\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatTabBodyPortal;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\n\n\nlet MatTabBody = /*#__PURE__*/(() => {\n  class MatTabBody {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dir\n     * @param {?=} changeDetectorRef\n     */\n    constructor(_elementRef, _dir,\n    /**\n    * @breaking-change 8.0.0 changeDetectorRef to be made required.\n    */\n    changeDetectorRef) {\n      this._elementRef = _elementRef;\n      this._dir = _dir;\n      /**\n       * Subscription to the directionality change observable.\n       */\n\n      this._dirChangeSubscription = Subscription.EMPTY;\n      /**\n       * Event emitted when the tab begins to animate towards the center as the active tab.\n       */\n\n      this._onCentering = new EventEmitter();\n      /**\n       * Event emitted before the centering of the tab begins.\n       */\n\n      this._beforeCentering = new EventEmitter();\n      /**\n       * Event emitted before the centering of the tab begins.\n       */\n\n      this._afterLeavingCenter = new EventEmitter();\n      /**\n       * Event emitted when the tab completes its animation towards the center.\n       */\n\n      this._onCentered = new EventEmitter(true);\n\n      if (this._dir && changeDetectorRef) {\n        this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n          this._computePositionAnimationState(dir);\n\n          changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /**\n     * The shifted index position of the tab body, where zero represents the active center tab.\n     * @param {?} position\n     * @return {?}\n     */\n\n\n    set position(position) {\n      this._positionIndex = position;\n\n      this._computePositionAnimationState();\n    }\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (this._position == 'center' && this.origin != null) {\n        this._position = this._computePositionFromOrigin();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._dirChangeSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n\n\n    _onTranslateTabStarted(e) {\n      /** @type {?} */\n      const isCentering = this._isCenterPosition(e.toState);\n\n      this._beforeCentering.emit(isCentering);\n\n      if (isCentering) {\n        this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n      }\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n\n\n    _onTranslateTabComplete(e) {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n\n\n    _getLayoutDirection() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n\n\n    _isCenterPosition(position) {\n      return position == 'center' || position == 'left-origin-center' || position == 'right-origin-center';\n    }\n    /**\n     * Computes the position state that will be used for the tab-body animation trigger.\n     * @param {?=} dir\n     * @return {?}\n     */\n\n\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\n      if (this._positionIndex < 0) {\n        this._position = dir == 'ltr' ? 'left' : 'right';\n      } else if (this._positionIndex > 0) {\n        this._position = dir == 'ltr' ? 'right' : 'left';\n      } else {\n        this._position = 'center';\n      }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     * @return {?}\n     */\n\n\n    _computePositionFromOrigin() {\n      /** @type {?} */\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr' && this.origin <= 0 || dir == 'rtl' && this.origin > 0) {\n        return 'left-origin-center';\n      }\n\n      return 'right-origin-center';\n    }\n\n  }\n\n  MatTabBody.ɵfac = function MatTabBody_Factory(t) {\n    return new (t || MatTabBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatTabBody.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTabBody,\n    selectors: [[\"mat-tab-body\"]],\n    viewQuery: function MatTabBody_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(PortalHostDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalHost = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-tab-body\"],\n    inputs: {\n      position: \"position\",\n      _content: [\"content\", \"_content\"],\n      origin: \"origin\"\n    },\n    outputs: {\n      _onCentering: \"_onCentering\",\n      _beforeCentering: \"_beforeCentering\",\n      _afterLeavingCenter: \"_afterLeavingCenter\",\n      _onCentered: \"_onCentered\"\n    },\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"mat-tab-body-content\"], [\"content\", \"\"], [\"matTabBodyHost\", \"\"]],\n    template: function MatTabBody_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@translateTab.start\", function MatTabBody_Template_div_animation_translateTab_start_0_listener($event) {\n          return ctx._onTranslateTabStarted($event);\n        })(\"@translateTab.done\", function MatTabBody_Template_div_animation_translateTab_done_0_listener($event) {\n          return ctx._onTranslateTabComplete($event);\n        });\n        ɵngcc0.ɵɵtemplate(2, MatTabBody_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"@translateTab\", ctx._position);\n      }\n    },\n    dependencies: [MatTabBodyPortal],\n    styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTabsAnimations.translateTab]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatTabBody;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nclass MatTabLabelWrapperBase {}\n/** @type {?} */\n\n\nconst _MatTabLabelWrapperMixinBase = /*#__PURE__*/mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * \\@docs-private\n */\n\n\nlet MatTabLabelWrapper = /*#__PURE__*/(() => {\n  class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      super();\n      this.elementRef = elementRef;\n    }\n    /**\n     * Sets focus on the wrapper element\n     * @return {?}\n     */\n\n\n    focus() {\n      this.elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getOffsetLeft() {\n      return this.elementRef.nativeElement.offsetLeft;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getOffsetWidth() {\n      return this.elementRef.nativeElement.offsetWidth;\n    }\n\n  }\n\n  MatTabLabelWrapper.ɵfac = function MatTabLabelWrapper_Factory(t) {\n    return new (t || MatTabLabelWrapper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatTabLabelWrapper.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTabLabelWrapper,\n    selectors: [[\"\", \"matTabLabelWrapper\", \"\"]],\n    hostVars: 3,\n    hostBindings: function MatTabLabelWrapper_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", !!ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatTabLabelWrapper;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n  @type {?} */\n\n\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\n\nclass MatTabHeaderBase {}\n/** @type {?} */\n\n\nconst _MatTabHeaderMixinBase = /*#__PURE__*/mixinDisableRipple(MatTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\n\n\nlet MatTabHeader = /*#__PURE__*/(() => {\n  class MatTabHeader extends _MatTabHeaderMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _viewportRuler\n     * @param {?} _dir\n     * @param {?=} _ngZone\n     */\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone) {\n      super();\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._viewportRuler = _viewportRuler;\n      this._dir = _dir;\n      this._ngZone = _ngZone;\n      /**\n       * The distance in pixels that the tab labels should be translated to the left.\n       */\n\n      this._scrollDistance = 0;\n      /**\n       * Whether the header should scroll to the selected index after the view has been checked.\n       */\n\n      this._selectedIndexChanged = false;\n      /**\n       * Emits when the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      /**\n       * Whether the controls for pagination should be displayed\n       */\n\n      this._showPaginationControls = false;\n      /**\n       * Whether the tab list can be scrolled more towards the end of the tab label list.\n       */\n\n      this._disableScrollAfter = true;\n      /**\n       * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n       */\n\n      this._disableScrollBefore = true;\n      this._selectedIndex = 0;\n      /**\n       * Event emitted when the option is selected.\n       */\n\n      this.selectFocusedIndex = new EventEmitter();\n      /**\n       * Event emitted when a label is focused.\n       */\n\n      this.indexFocused = new EventEmitter();\n    }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n\n\n    get selectedIndex() {\n      return this._selectedIndex;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set selectedIndex(value) {\n      value = coerceNumberProperty(value);\n      this._selectedIndexChanged = this._selectedIndex != value;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      // If the number of tab labels have changed, check if scrolling should be enabled\n      if (this._tabLabelCount != this._labelWrappers.length) {\n        this._updatePagination();\n\n        this._tabLabelCount = this._labelWrappers.length;\n\n        this._changeDetectorRef.markForCheck();\n      } // If the selected index has changed, scroll to the label and check if the scrolling controls\n      // should be disabled.\n\n\n      if (this._selectedIndexChanged) {\n        this._scrollToLabel(this._selectedIndex);\n\n        this._checkScrollingControls();\n\n        this._alignInkBarToSelectedTab();\n\n        this._selectedIndexChanged = false;\n\n        this._changeDetectorRef.markForCheck();\n      } // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n      // then translate the header to reflect this.\n\n\n      if (this._scrollDistanceChanged) {\n        this._updateTabScrollPosition();\n\n        this._scrollDistanceChanged = false;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleKeydown(event) {\n      switch (event.keyCode) {\n        case HOME:\n          this._keyManager.setFirstItemActive();\n\n          event.preventDefault();\n          break;\n\n        case END:\n          this._keyManager.setLastItemActive();\n\n          event.preventDefault();\n          break;\n\n        case ENTER:\n        case SPACE:\n          this.selectFocusedIndex.emit(this.focusIndex);\n          event.preventDefault();\n          break;\n\n        default:\n          this._keyManager.onKeydown(event);\n\n      }\n    }\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      /** @type {?} */\n      const dirChange = this._dir ? this._dir.change : of(null);\n      /** @type {?} */\n\n      const resize = this._viewportRuler.change(150);\n      /** @type {?} */\n\n\n      const realign = () => {\n        this._updatePagination();\n\n        this._alignInkBarToSelectedTab();\n      };\n\n      this._keyManager = new FocusKeyManager(this._labelWrappers).withHorizontalOrientation(this._getLayoutDirection()).withWrap();\n\n      this._keyManager.updateActiveItem(0); // Defer the first call in order to allow for slower browsers to lay out the elements.\n      // This helps in cases where the user lands directly on a page with paginated tabs.\n\n\n      typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign(); // On dir change or window resize, realign the ink bar and update the orientation of\n      // the key manager if the direction has changed.\n\n      merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n        realign();\n\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      }); // If there is a change in the focus key manager we need to emit the `indexFocused`\n      // event in order to provide a public event that notifies about focus changes. Also we realign\n      // the tabs container by scrolling the new focused tab into the visible section.\n\n      this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n        this.indexFocused.emit(newFocusIndex);\n\n        this._setTabFocus(newFocusIndex);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n\n\n    _onContentChanges() {\n      /** @type {?} */\n      const zoneCallback = () => {\n        this._updatePagination();\n\n        this._alignInkBarToSelectedTab();\n\n        this._changeDetectorRef.markForCheck();\n      }; // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n\n\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n    /**\n     * Updating the view whether pagination should be enabled or not\n     * @return {?}\n     */\n\n\n    _updatePagination() {\n      this._checkPaginationEnabled();\n\n      this._checkScrollingControls();\n\n      this._updateTabScrollPosition();\n    }\n    /**\n     * Tracks which element has focus; used for keyboard navigation\n     * @return {?}\n     */\n\n\n    get focusIndex() {\n      return this._keyManager ?\n      /** @type {?} */\n      this._keyManager.activeItemIndex : 0;\n    }\n    /**\n     * When the focus index is set, we must manually send focus to the correct label\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set focusIndex(value) {\n      if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n        return;\n      }\n\n      this._keyManager.setActiveItem(value);\n    }\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n\n\n    _isValidIndex(index) {\n      if (!this._labelWrappers) {\n        return true;\n      }\n      /** @type {?} */\n\n\n      const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n      return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n\n\n    _setTabFocus(tabIndex) {\n      if (this._showPaginationControls) {\n        this._scrollToLabel(tabIndex);\n      }\n\n      if (this._labelWrappers && this._labelWrappers.length) {\n        this._labelWrappers.toArray()[tabIndex].focus();\n        /** @type {?} */\n\n\n        const containerEl = this._tabListContainer.nativeElement;\n        /** @type {?} */\n\n        const dir = this._getLayoutDirection();\n\n        if (dir == 'ltr') {\n          containerEl.scrollLeft = 0;\n        } else {\n          containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n        }\n      }\n    }\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n\n\n    _getLayoutDirection() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n\n\n    _updateTabScrollPosition() {\n      /** @type {?} */\n      const scrollDistance = this.scrollDistance;\n      /** @type {?} */\n\n      const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance; // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n      // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n      // and ripples will exceed the boundaries of the visible tab bar.\n      // See: https://github.com/angular/material2/issues/10276\n\n      this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n    }\n    /**\n     * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n     * @return {?}\n     */\n\n\n    get scrollDistance() {\n      return this._scrollDistance;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set scrollDistance(v) {\n      this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v)); // Mark that the scroll distance has changed so that after the view is checked, the CSS\n      // transformation can move the header.\n\n      this._scrollDistanceChanged = true;\n\n      this._checkScrollingControls();\n    }\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} scrollDir\n     * @return {?}\n     */\n\n\n    _scrollHeader(scrollDir) {\n      /** @type {?} */\n      const viewLength = this._tabListContainer.nativeElement.offsetWidth; // Move the scroll distance one-third the length of the tab list's viewport.\n\n      this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n\n\n    _scrollToLabel(labelIndex) {\n      /** @type {?} */\n      const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n      if (!selectedLabel) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n      /** @type {?} */\n\n      let labelBeforePos;\n      /** @type {?} */\n\n      let labelAfterPos;\n\n      if (this._getLayoutDirection() == 'ltr') {\n        labelBeforePos = selectedLabel.getOffsetLeft();\n        labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n      } else {\n        labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n        labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n      }\n      /** @type {?} */\n\n\n      const beforeVisiblePos = this.scrollDistance;\n      /** @type {?} */\n\n      const afterVisiblePos = this.scrollDistance + viewLength;\n\n      if (labelBeforePos < beforeVisiblePos) {\n        // Scroll header to move label to the before direction\n        this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n      } else if (labelAfterPos > afterVisiblePos) {\n        // Scroll header to move label to the after direction\n        this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n      }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n\n\n    _checkPaginationEnabled() {\n      /** @type {?} */\n      const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n\n\n    _checkScrollingControls() {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n\n\n    _getMaxScrollDistance() {\n      /** @type {?} */\n      const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n      /** @type {?} */\n\n      const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n      return lengthOfTabList - viewLength || 0;\n    }\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n\n\n    _alignInkBarToSelectedTab() {\n      /** @type {?} */\n      const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement : null;\n\n      this._inkBar.alignToElement(\n      /** @type {?} */\n      selectedLabelWrapper);\n    }\n\n  }\n\n  MatTabHeader.ɵfac = function MatTabHeader_Factory(t) {\n    return new (t || MatTabHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatTabHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTabHeader,\n    selectors: [[\"mat-tab-header\"]],\n    contentQueries: function MatTabHeader_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabelWrapper, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelWrappers = _t);\n      }\n    },\n    viewQuery: function MatTabHeader_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatInkBar, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabListContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabList = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-tab-header\"],\n    hostVars: 4,\n    hostBindings: function MatTabHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-controls-enabled\", ctx._showPaginationControls)(\"mat-tab-header-rtl\", ctx._getLayoutDirection() == \"rtl\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      selectedIndex: \"selectedIndex\"\n    },\n    outputs: {\n      selectFocusedIndex: \"selectFocusedIndex\",\n      indexFocused: \"indexFocused\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 11,\n    vars: 6,\n    consts: [[\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-before\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"click\"], [1, \"mat-tab-header-pagination-chevron\"], [1, \"mat-tab-label-container\", 3, \"keydown\"], [\"tabListContainer\", \"\"], [\"role\", \"tablist\", 1, \"mat-tab-list\", 3, \"cdkObserveContent\"], [\"tabList\", \"\"], [1, \"mat-tab-labels\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-after\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"click\"]],\n    template: function MatTabHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTabHeader_Template_div_click_0_listener() {\n          return ctx._scrollHeader(\"before\");\n        });\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatTabHeader_Template_div_keydown_2_listener($event) {\n          return ctx._handleKeydown($event);\n        });\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabHeader_Template_div_cdkObserveContent_4_listener() {\n          return ctx._onContentChanges();\n        });\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6);\n        ɵngcc0.ɵɵprojection(7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(8, \"mat-ink-bar\");\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 7);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTabHeader_Template_div_click_9_listener() {\n          return ctx._scrollHeader(\"after\");\n        });\n        ɵngcc0.ɵɵelement(10, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollBefore);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollBefore || ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(9);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollAfter);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollAfter || ctx.disableRipple);\n      }\n    },\n    dependencies: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent, MatInkBar],\n    styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media screen and (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media screen and (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media screen and (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatTabHeader;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Used to generate unique ID's for each tab component\n  @type {?} */\n\n\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\n\nclass MatTabChangeEvent {}\n/**\n * \\@docs-private\n */\n\n\nclass MatTabGroupBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatTabGroupMixinBase = /*#__PURE__*/mixinColor( /*#__PURE__*/mixinDisableRipple(MatTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n\n\nlet MatTabGroup = /*#__PURE__*/(() => {\n  class MatTabGroup extends _MatTabGroupMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     */\n    constructor(elementRef, _changeDetectorRef) {\n      super(elementRef);\n      this._changeDetectorRef = _changeDetectorRef;\n      /**\n       * The tab index that should be selected after the content has been checked.\n       */\n\n      this._indexToSelect = 0;\n      /**\n       * Snapshot of the height of the tab body wrapper before another tab is activated.\n       */\n\n      this._tabBodyWrapperHeight = 0;\n      /**\n       * Subscription to tabs being added/removed.\n       */\n\n      this._tabsSubscription = Subscription.EMPTY;\n      /**\n       * Subscription to changes in the tab labels.\n       */\n\n      this._tabLabelSubscription = Subscription.EMPTY;\n      this._dynamicHeight = false;\n      this._selectedIndex = null;\n      /**\n       * Position of the tab header.\n       */\n\n      this.headerPosition = 'above';\n      /**\n       * Output to enable support for two-way binding on `[(selectedIndex)]`\n       */\n\n      this.selectedIndexChange = new EventEmitter();\n      /**\n       * Event emitted when focus has changed within a tab group.\n       */\n\n      this.focusChange = new EventEmitter();\n      /**\n       * Event emitted when the body animation has completed\n       */\n\n      this.animationDone = new EventEmitter();\n      /**\n       * Event emitted when the tab selection has changed.\n       */\n\n      this.selectedTabChange = new EventEmitter(true);\n      this._groupId = nextId++;\n    }\n    /**\n     * Whether the tab group should grow to the size of the active tab.\n     * @return {?}\n     */\n\n\n    get dynamicHeight() {\n      return this._dynamicHeight;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set dynamicHeight(value) {\n      this._dynamicHeight = coerceBooleanProperty(value);\n    }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n\n\n    get selectedIndex() {\n      return this._selectedIndex;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set selectedIndex(value) {\n      this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /**\n     * Background color of the tab group.\n     * @return {?}\n     */\n\n\n    get backgroundColor() {\n      return this._backgroundColor;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set backgroundColor(value) {\n      /** @type {?} */\n      const nativeElement = this._elementRef.nativeElement;\n      nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n      if (value) {\n        nativeElement.classList.add(`mat-background-${value}`);\n      }\n\n      this._backgroundColor = value;\n    }\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      /** @type {?} */\n      const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect); // If there is a change in selected index, emit a change event. Should not trigger if\n      // the selected index has not yet been initialized.\n\n\n      if (this._selectedIndex != indexToSelect) {\n        /** @type {?} */\n        const isFirstRun = this._selectedIndex == null;\n\n        if (!isFirstRun) {\n          this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        } // Changing these values after change detection has run\n        // since the checked content may contain references to them.\n\n\n        Promise.resolve().then(() => {\n          this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n          if (!isFirstRun) {\n            this.selectedIndexChange.emit(indexToSelect);\n          }\n        });\n      } // Setup the position for each tab and optionally setup an origin on the next selected tab.\n\n\n      this._tabs.forEach((tab, index) => {\n        tab.position = index - indexToSelect; // If there is already a selected tab, then set up an origin for the next selected tab\n        // if it doesn't have one already.\n\n        if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n          tab.origin = indexToSelect - this._selectedIndex;\n        }\n      });\n\n      if (this._selectedIndex !== indexToSelect) {\n        this._selectedIndex = indexToSelect;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._subscribeToTabLabels(); // Subscribe to changes in the amount of tabs, in order to be\n      // able to re-render the content as new tabs are added or removed.\n\n\n      this._tabsSubscription = this._tabs.changes.subscribe(() => {\n        /** @type {?} */\n        const indexToSelect = this._clampTabIndex(this._indexToSelect); // Maintain the previously-selected tab if a new tab is added or removed and there is no\n        // explicit change that selects a different tab.\n\n\n        if (indexToSelect === this._selectedIndex) {\n          /** @type {?} */\n          const tabs = this._tabs.toArray();\n\n          for (let i = 0; i < tabs.length; i++) {\n            if (tabs[i].isActive) {\n              // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n              // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n              // adding a tab within the `selectedIndexChange` event.\n              this._indexToSelect = this._selectedIndex = i;\n              break;\n            }\n          }\n        }\n\n        this._subscribeToTabLabels();\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._tabsSubscription.unsubscribe();\n\n      this._tabLabelSubscription.unsubscribe();\n    }\n    /**\n     * Re-aligns the ink bar to the selected tab element.\n     * @return {?}\n     */\n\n\n    realignInkBar() {\n      if (this._tabHeader) {\n        this._tabHeader._alignInkBarToSelectedTab();\n      }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n\n    _focusChanged(index) {\n      this.focusChange.emit(this._createChangeEvent(index));\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n\n    _createChangeEvent(index) {\n      /** @type {?} */\n      const event = new MatTabChangeEvent();\n      event.index = index;\n\n      if (this._tabs && this._tabs.length) {\n        event.tab = this._tabs.toArray()[index];\n      }\n\n      return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     * @return {?}\n     */\n\n\n    _subscribeToTabLabels() {\n      if (this._tabLabelSubscription) {\n        this._tabLabelSubscription.unsubscribe();\n      }\n\n      this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /**\n     * Clamps the given index to the bounds of 0 and the tabs length.\n     * @param {?} index\n     * @return {?}\n     */\n\n\n    _clampTabIndex(index) {\n      // Note the `|| 0`, which ensures that values like NaN can't get through\n      // and which would otherwise throw the component into an infinite loop\n      // (since Math.max(NaN, 0) === NaN).\n      return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n\n\n    _getTabLabelId(i) {\n      return `mat-tab-label-${this._groupId}-${i}`;\n    }\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n\n\n    _getTabContentId(i) {\n      return `mat-tab-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n\n\n    _setTabBodyWrapperHeight(tabHeight) {\n      if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const wrapper = this._tabBodyWrapper.nativeElement;\n      wrapper.style.height = this._tabBodyWrapperHeight + 'px'; // This conditional forces the browser to paint the height so that\n      // the animation to the new height can have an origin.\n\n      if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n        wrapper.style.height = tabHeight + 'px';\n      }\n    }\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n\n\n    _removeTabBodyWrapperHeight() {\n      this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n      this._tabBodyWrapper.nativeElement.style.height = '';\n      this.animationDone.emit();\n    }\n    /**\n     * Handle click events, setting new selected index if appropriate.\n     * @param {?} tab\n     * @param {?} tabHeader\n     * @param {?} idx\n     * @return {?}\n     */\n\n\n    _handleClick(tab, tabHeader, idx) {\n      if (!tab.disabled) {\n        this.selectedIndex = tabHeader.focusIndex = idx;\n      }\n    }\n    /**\n     * Retrieves the tabindex for the tab.\n     * @param {?} tab\n     * @param {?} idx\n     * @return {?}\n     */\n\n\n    _getTabIndex(tab, idx) {\n      if (tab.disabled) {\n        return null;\n      }\n\n      return this.selectedIndex === idx ? 0 : -1;\n    }\n\n  }\n\n  MatTabGroup.ɵfac = function MatTabGroup_Factory(t) {\n    return new (t || MatTabGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatTabGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTabGroup,\n    selectors: [[\"mat-tab-group\"]],\n    contentQueries: function MatTabGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTab, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabs = _t);\n      }\n    },\n    viewQuery: function MatTabGroup_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabBodyWrapper = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabHeader = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-tab-group\"],\n    hostVars: 4,\n    hostBindings: function MatTabGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-group-dynamic-height\", ctx.dynamicHeight)(\"mat-tab-group-inverted-header\", ctx.headerPosition === \"below\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      disableRipple: \"disableRipple\",\n      headerPosition: \"headerPosition\",\n      dynamicHeight: \"dynamicHeight\",\n      selectedIndex: \"selectedIndex\",\n      backgroundColor: \"backgroundColor\"\n    },\n    outputs: {\n      selectedIndexChange: \"selectedIndexChange\",\n      focusChange: \"focusChange\",\n      animationDone: \"animationDone\",\n      selectedTabChange: \"selectedTabChange\"\n    },\n    exportAs: [\"matTabGroup\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 4,\n    consts: [[3, \"selectedIndex\", \"disableRipple\", \"indexFocused\", \"selectFocusedIndex\"], [\"tabHeader\", \"\"], [\"class\", \"mat-tab-label\", \"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 3, \"id\", \"mat-tab-label-active\", \"disabled\", \"matRippleDisabled\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-tab-body-wrapper\"], [\"tabBodyWrapper\", \"\"], [\"role\", \"tabpanel\", 3, \"id\", \"mat-tab-body-active\", \"content\", \"position\", \"origin\", \"_onCentered\", \"_onCentering\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 1, \"mat-tab-label\", 3, \"id\", \"disabled\", \"matRippleDisabled\", \"click\"], [1, \"mat-tab-label-content\"], [3, \"ngIf\"], [3, \"cdkPortalOutlet\"], [\"role\", \"tabpanel\", 3, \"id\", \"content\", \"position\", \"origin\", \"_onCentered\", \"_onCentering\"]],\n    template: function MatTabGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-tab-header\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"indexFocused\", function MatTabGroup_Template_mat_tab_header_indexFocused_0_listener($event) {\n          return ctx._focusChanged($event);\n        })(\"selectFocusedIndex\", function MatTabGroup_Template_mat_tab_header_selectFocusedIndex_0_listener($event) {\n          return ctx.selectedIndex = $event;\n        });\n        ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_Template, 4, 14, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵtemplate(5, MatTabGroup_mat_tab_body_5_Template, 1, 7, \"mat-tab-body\", 5);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"selectedIndex\", ctx.selectedIndex)(\"disableRipple\", ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n      }\n    },\n    dependencies: [ɵngcc5.NgForOf, ɵngcc5.NgIf, ɵngcc6.CdkPortalOutlet, ɵngcc3.MatRipple, ɵngcc7.CdkMonitorFocus, MatTabLabelWrapper, MatTabBody, MatTabHeader],\n    styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media screen and (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media screen and (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media screen and (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatTabGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nclass MatTabNavBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatTabNavMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinColor(MatTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n\n\nlet MatTabNav = /*#__PURE__*/(() => {\n  class MatTabNav extends _MatTabNavMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     * @param {?} _viewportRuler\n     */\n    constructor(elementRef, _dir, _ngZone, _changeDetectorRef, _viewportRuler) {\n      super(elementRef);\n      this._dir = _dir;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._viewportRuler = _viewportRuler;\n      /**\n       * Subject that emits when the component has been destroyed.\n       */\n\n      this._onDestroy = new Subject();\n    }\n    /**\n     * Background color of the tab nav.\n     * @return {?}\n     */\n\n\n    get backgroundColor() {\n      return this._backgroundColor;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set backgroundColor(value) {\n      /** @type {?} */\n      const nativeElement = this._elementRef.nativeElement;\n      nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n      if (value) {\n        nativeElement.classList.add(`mat-background-${value}`);\n      }\n\n      this._backgroundColor = value;\n    }\n    /**\n     * Notifies the component that the active link has been changed.\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\n     * @param {?} element\n     * @return {?}\n     */\n\n\n    updateActiveLink(element) {\n      // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n      // @breaking-change 8.0.0\n      this._activeLinkChanged = !!element;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._ngZone.runOutsideAngular(() => {\n        /** @type {?} */\n        const dirChange = this._dir ? this._dir.change : of(null);\n        return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy)).subscribe(() => this._alignInkBar());\n      });\n    }\n    /**\n     * Checks if the active link has been changed and, if so, will update the ink bar.\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      if (this._activeLinkChanged) {\n        /** @type {?} */\n        const activeTab = this._tabLinks.find(tab => tab.active);\n\n        this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n\n        this._alignInkBar();\n\n        this._activeLinkChanged = false;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n    }\n    /**\n     * Aligns the ink bar to the active link.\n     * @return {?}\n     */\n\n\n    _alignInkBar() {\n      if (this._activeLinkElement) {\n        this._inkBar.show();\n\n        this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n      } else {\n        this._inkBar.hide();\n      }\n    }\n\n  }\n\n  MatTabNav.ɵfac = function MatTabNav_Factory(t) {\n    return new (t || MatTabNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler));\n  };\n\n  MatTabNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTabNav,\n    selectors: [[\"\", \"mat-tab-nav-bar\", \"\"]],\n    contentQueries: function MatTabNav_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLink, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabLinks = _t);\n      }\n    },\n    viewQuery: function MatTabNav_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatInkBar, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-tab-nav-bar\"],\n    inputs: {\n      color: \"color\",\n      disableRipple: \"disableRipple\",\n      backgroundColor: \"backgroundColor\"\n    },\n    exportAs: [\"matTabNavBar\", \"matTabNav\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c5,\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"mat-tab-links\", 3, \"cdkObserveContent\"]],\n    template: function MatTabNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabNav_Template_div_cdkObserveContent_0_listener() {\n          return ctx._alignInkBar();\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelement(2, \"mat-ink-bar\");\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [ɵngcc4.CdkObserveContent, MatInkBar],\n    styles: [\".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative;display:flex}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media screen and (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media screen and (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media screen and (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatTabNav;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass MatTabLinkBase {}\n/** @type {?} */\n\n\nconst _MatTabLinkMixinBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinDisabled(MatTabLinkBase)));\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n\n\nlet MatTabLink = /*#__PURE__*/(() => {\n  class MatTabLink extends _MatTabLinkMixinBase {\n    /**\n     * @param {?} _tabNavBar\n     * @param {?} _elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?} globalOptions\n     * @param {?} tabIndex\n     * @param {?=} _focusMonitor\n     */\n    constructor(_tabNavBar, _elementRef, ngZone, platform, globalOptions, tabIndex, _focusMonitor) {\n      super();\n      this._tabNavBar = _tabNavBar;\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      /**\n       * Whether the tab link is active or not.\n       */\n\n      this._isActive = false;\n      /**\n       * Whether the ripples are globally disabled through the RippleGlobalOptions\n       */\n\n      this._ripplesGloballyDisabled = false;\n      /**\n       * Ripple configuration for ripples that are launched on pointer down.\n       * \\@docs-private\n       */\n\n      this.rippleConfig = {};\n      this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n      this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n      this.tabIndex = parseInt(tabIndex) || 0;\n\n      if (globalOptions) {\n        // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n        this._ripplesGloballyDisabled = !!globalOptions.disabled;\n        this.rippleConfig = {\n          terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n          animation: globalOptions.animation\n        };\n      }\n\n      if (_focusMonitor) {\n        _focusMonitor.monitor(_elementRef);\n      }\n    }\n    /**\n     * Whether the link is active.\n     * @return {?}\n     */\n\n\n    get active() {\n      return this._isActive;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set active(value) {\n      if (value !== this._isActive) {\n        this._isActive = value;\n\n        this._tabNavBar.updateActiveLink(this._elementRef);\n      }\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    get rippleDisabled() {\n      return this.disabled || this.disableRipple || this._tabNavBar.disableRipple || this._ripplesGloballyDisabled;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._tabLinkRipple._removeTriggerEvents();\n\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n    }\n\n  }\n\n  MatTabLink.ɵfac = function MatTabLink_Factory(t) {\n    return new (t || MatTabLink)(ɵngcc0.ɵɵdirectiveInject(MatTabNav), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.FocusMonitor));\n  };\n\n  MatTabLink.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTabLink,\n    selectors: [[\"\", \"mat-tab-link\", \"\"], [\"\", \"matTabLink\", \"\"]],\n    hostAttrs: [1, \"mat-tab-link\"],\n    hostVars: 7,\n    hostBindings: function MatTabLink_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-current\", ctx.active)(\"aria-disabled\", ctx.disabled.toString())(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled)(\"mat-tab-label-active\", ctx.active);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      active: \"active\"\n    },\n    exportAs: [\"matTabLink\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatTabLink;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet MatTabsModule = /*#__PURE__*/(() => {\n  class MatTabsModule {}\n\n  MatTabsModule.ɵfac = function MatTabsModule_Factory(t) {\n    return new (t || MatTabsModule)();\n  };\n\n  MatTabsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTabsModule\n  });\n  MatTabsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, MatCommonModule, PortalModule, MatRippleModule, ObserversModule, A11yModule, MatCommonModule]\n  });\n  return MatTabsModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTabsModule, {\n    declarations: function () {\n      return [MatTabGroup, MatTabLabel, MatTab, MatInkBar, MatTabLabelWrapper, MatTabNav, MatTabLink, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabContent];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, PortalModule, MatRippleModule, ObserversModule, A11yModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatTabGroup, MatTabLabel, MatTab, MatTabNav, MatTabLink, MatTabContent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabContent, MatTabsModule, MatTabChangeEvent, MatTabGroupBase, _MatTabGroupMixinBase, MatTabGroup, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵa23, MatTabBase as ɵf23, _MatTabMixinBase as ɵg23, MatTabHeaderBase as ɵb23, _MatTabHeaderMixinBase as ɵc23, MatTabLabelWrapperBase as ɵd23, _MatTabLabelWrapperMixinBase as ɵe23, MatTabLinkBase as ɵj23, MatTabNavBase as ɵh23, _MatTabLinkMixinBase as ɵk23, _MatTabNavMixinBase as ɵi23 }; //# sourceMappingURL=tabs.js.map","map":null,"metadata":{},"sourceType":"module"}