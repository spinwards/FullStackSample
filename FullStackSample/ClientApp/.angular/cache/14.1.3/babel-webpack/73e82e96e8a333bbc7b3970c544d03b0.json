{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n  @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/** *\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\n\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\n\nclass MatButtonToggleGroupMultiple {}\n/** @type {?} */\n\n\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\n\nclass MatButtonToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\n\n\nlet MatButtonToggleGroup = /*#__PURE__*/(() => {\n  class MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n      this._changeDetector = _changeDetector;\n      this._vertical = false;\n      this._multiple = false;\n      this._disabled = false;\n      /**\n       * The method to be called in order to update ngModel.\n       * Now `ngModel` binding is not supported in multiple selection mode.\n       */\n\n      this._controlValueAccessorChangeFn = () => {};\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       */\n\n\n      this._onTouched = () => {};\n\n      this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n      /**\n       * Event that emits whenever the value of the group changes.\n       * Used to facilitate two-way data binding.\n       * \\@docs-private\n       */\n\n      this.valueChange = new EventEmitter();\n      /**\n       * Event emitted when the group's value changes.\n       */\n\n      this.change = new EventEmitter();\n      this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n\n\n    get name() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set name(value) {\n      this._name = value;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(toggle => toggle.name = this._name);\n      }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n\n\n    get vertical() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set vertical(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n\n\n    get value() {\n      /** @type {?} */\n      const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n      if (this.multiple) {\n        return selected.map(toggle => toggle.value);\n      }\n\n      return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n\n\n    set value(newValue) {\n      this._setSelectionByValue(newValue);\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n\n\n    get selected() {\n      /** @type {?} */\n      const selected = this._selectionModel.selected;\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n\n\n    get multiple() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set multiple(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(toggle => toggle._markForCheck());\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n\n    _emitChangeEvent() {\n      /** @type {?} */\n      const selected = this.selected;\n      /** @type {?} */\n\n      const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      /** @type {?} */\n\n      const event = new MatButtonToggleChange(\n      /** @type {?} */\n      source, this.value);\n\n      this._controlValueAccessorChangeFn(event.value);\n\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n\n\n    _syncButtonToggle(toggle, select, isUserInput = false) {\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        /** @type {?} */\n        this.selected.checked = false;\n      }\n\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      } // Only emit the change event for user input.\n\n\n      if (isUserInput) {\n        this._emitChangeEvent();\n      } // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n\n    _isSelected(toggle) {\n      return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n\n    _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n      }\n\n      return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _setSelectionByValue(value) {\n      this._rawValue = value;\n\n      if (!this._buttonToggles) {\n        return;\n      }\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n\n        this._clearSelection();\n\n        value.forEach(currentValue => this._selectValue(currentValue));\n      } else {\n        this._clearSelection();\n\n        this._selectValue(value);\n      }\n    }\n    /**\n     * Clears the selected toggles.\n     * @return {?}\n     */\n\n\n    _clearSelection() {\n      this._selectionModel.clear();\n\n      this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _selectValue(value) {\n      /** @type {?} */\n      const correspondingOption = this._buttonToggles.find(toggle => {\n        return toggle.value != null && toggle.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n\n        this._selectionModel.select(correspondingOption);\n      }\n    }\n\n  }\n\n  MatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n    return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n  };\n\n  MatButtonToggleGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatButtonToggleGroup,\n    selectors: [[\"mat-button-toggle-group\"]],\n    contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n    hostVars: 5,\n    hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n      }\n    },\n    inputs: {\n      appearance: \"appearance\",\n      name: \"name\",\n      vertical: \"vertical\",\n      value: \"value\",\n      multiple: \"multiple\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      change: \"change\"\n    },\n    exportAs: [\"matButtonToggleGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n      provide: MatButtonToggleGroupMultiple,\n      useExisting: MatButtonToggleGroup\n    }])]\n  });\n  /** @nocollapse */\n\n  return MatButtonToggleGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private\n */\n\n\nclass MatButtonToggleBase {}\n/** @type {?} */\n\n\nconst _MatButtonToggleMixinBase = /*#__PURE__*/mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\n\n\nlet MatButtonToggle = /*#__PURE__*/(() => {\n  class MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n      super();\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._isSingleSelector = false;\n      this._checked = false;\n      /**\n       * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n       */\n\n      this.ariaLabelledby = null;\n      this._disabled = false;\n      /**\n       * Event emitted when the group value changes.\n       */\n\n      this.change = new EventEmitter();\n      /** @type {?} */\n\n      const parsedTabIndex = Number(defaultTabIndex);\n      this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n      this.buttonToggleGroup = toggleGroup;\n      this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n\n\n    get buttonId() {\n      return `${this.id}-button`;\n    }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n\n\n    get appearance() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set appearance(value) {\n      this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n\n\n    get checked() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set checked(value) {\n      /** @type {?} */\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._checked) {\n        this._checked = newValue;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n      this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n      this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n      if (this._isSingleSelector) {\n        this.name = this.buttonToggleGroup.name;\n      }\n\n      if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n        this.checked = true;\n      }\n\n      this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n\n\n    focus() {\n      this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n\n\n    _onButtonClick() {\n      /** @type {?} */\n      const newChecked = this._isSingleSelector ? true : !this._checked;\n\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n\n          this.buttonToggleGroup._onTouched();\n        }\n      } // Emit a change event when it's the single selector\n\n\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n\n    _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n\n  }\n\n  MatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n    return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n  };\n\n  MatButtonToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatButtonToggle,\n    selectors: [[\"mat-button-toggle\"]],\n    viewQuery: function MatButtonToggle_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-button-toggle\"],\n    hostVars: 10,\n    hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      tabIndex: \"tabIndex\",\n      appearance: \"appearance\",\n      checked: \"checked\",\n      disabled: \"disabled\",\n      id: \"id\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      value: \"value\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matButtonToggle\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 9,\n    consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n    template: function MatButtonToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n          return ctx._onButtonClick();\n        });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelement(4, \"div\", 3)(5, \"div\", 4);\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n      }\n    },\n    dependencies: [ɵngcc2.MatRipple],\n    styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;cursor:pointer;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatButtonToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nlet MatButtonToggleModule = /*#__PURE__*/(() => {\n  class MatButtonToggleModule {}\n\n  MatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n    return new (t || MatButtonToggleModule)();\n  };\n\n  MatButtonToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatButtonToggleModule\n  });\n  MatButtonToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatRippleModule, MatCommonModule]\n  });\n  return MatButtonToggleModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function () {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function () {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule }; //# sourceMappingURL=button-toggle.js.map","map":null,"metadata":{},"sourceType":"module"}