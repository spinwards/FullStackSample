{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nlet LayoutModule = /*#__PURE__*/(() => {\n  class LayoutModule {}\n\n  LayoutModule.ɵfac = function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  };\n\n  LayoutModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  LayoutModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return LayoutModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Global registry for all dynamically-created, injected media queries.\n  @type {?} */\n\n\nconst mediaQueriesForWebkitCompatibility = /*#__PURE__*/new Set();\n/** *\n * Style tag that holds all of the dynamically-created media queries.\n  @type {?} */\n\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\n\nclass MediaMatcher {\n  /**\n   * @param {?} platform\n   */\n  constructor(platform) {\n    this.platform = platform;\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n    // call it from a different scope.\n    window.matchMedia.bind(window) : noopMatchMedia;\n  }\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   * @param {?} query\n   * @return {?}\n   */\n\n\n  matchMedia(query) {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n\n    return this._matchMedia(query);\n  }\n\n}\n\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n  return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nMediaMatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MediaMatcher,\n  factory: MediaMatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nMediaMatcher.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function MediaMatcher_Factory() {\n    return new MediaMatcher(inject(Platform));\n  },\n  token: MediaMatcher,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      /** @type {?} */\n\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      /** @type {?} */\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return (\n    /** @type {?} */\n    {\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {},\n      removeListener: () => {}\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Utility for checking the matching state of \\@media queries.\n */\n\n\nclass BreakpointObserver {\n  /**\n   * @param {?} mediaMatcher\n   * @param {?} zone\n   */\n  constructor(mediaMatcher, zone) {\n    this.mediaMatcher = mediaMatcher;\n    this.zone = zone;\n    /**\n     * A map of all media queries currently being listened for.\n     */\n\n    this._queries = new Map();\n    /**\n     * A subject for all other observables to takeUntil based on.\n     */\n\n    this._destroySubject = new Subject();\n  }\n  /**\n   * Completes the active subject, signalling to all other observables to complete.\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._destroySubject.next();\n\n    this._destroySubject.complete();\n  }\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param {?} value One or more media queries to check.\n   * @return {?} Whether any of the media queries match.\n   */\n\n\n  isMatched(value) {\n    /** @type {?} */\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param {?} value One or more media queries to check.\n   * @return {?} A stream of matches for the given queries.\n   */\n\n\n  observe(value) {\n    /** @type {?} */\n    const queries = splitQueries(coerceArray(value));\n    /** @type {?} */\n\n    const observables = queries.map(query => this._registerQuery(query).observable);\n    return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map(breakpointStates => {\n      /** @type {?} */\n      const response = {\n        matches: false,\n        breakpoints: {}\n      };\n      breakpointStates.forEach(state => {\n        response.matches = response.matches || state.matches;\n        response.breakpoints[state.query] = state.matches;\n      });\n      return response;\n    }));\n  }\n  /**\n   * Registers a specific query to be listened for.\n   * @param {?} query\n   * @return {?}\n   */\n\n\n  _registerQuery(query) {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return (\n        /** @type {?} */\n        this._queries.get(query)\n      );\n    }\n    /** @type {?} */\n\n\n    const mql = this.mediaMatcher.matchMedia(query);\n    /** @type {?} */\n\n    let queryListener;\n    /** @type {?} */\n\n    const queryObservable = fromEventPattern( // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n    // back into the zone because matchMedia is only included in Zone.js by loading the\n    // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n    // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n    // patches it.\n    listener => {\n      queryListener = e => this.zone.run(() => listener(e));\n\n      mql.addListener(queryListener);\n    }, () => mql.removeListener(queryListener)).pipe(takeUntil(this._destroySubject), startWith(mql), map(nextMql => ({\n      query,\n      matches: nextMql.matches\n    })));\n    /** @type {?} */\n\n    const output = {\n      observable: queryObservable,\n      mql\n    };\n\n    this._queries.set(query, output);\n\n    return output;\n  }\n\n}\n\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n  return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nBreakpointObserver.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BreakpointObserver,\n  factory: BreakpointObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nBreakpointObserver.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function BreakpointObserver_Factory() {\n    return new BreakpointObserver(inject(MediaMatcher), inject(NgZone));\n  },\n  token: BreakpointObserver,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\n\n\nconst Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599px) and (orientation: portrait), ' + '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher }; //# sourceMappingURL=layout.js.map","map":null,"metadata":{},"sourceType":"module"}